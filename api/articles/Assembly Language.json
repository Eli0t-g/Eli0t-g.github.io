{"title":"Assembly Language","uid":"663c77d5ec7d7de4374e915594360d5a","slug":"Assembly Language","date":"2020-12-08T12:45:27.000Z","updated":"2021-04-19T11:07:02.975Z","comments":true,"path":"api/articles/Assembly Language.json","keywords":null,"cover":[],"content":"<h1 id=\"学习目的\"><a href=\"#学习目的\" class=\"headerlink\" title=\"学习目的\"></a>学习目的</h1><p>通过用汇编语言进行编程而深入地理解计算机底层的基本工作机理，达到随心所欲地控制计算机的目的</p>\n<h1 id=\"汇编语言的由来\"><a href=\"#汇编语言的由来\" class=\"headerlink\" title=\"汇编语言的由来\"></a>汇编语言的由来</h1><p>对于人类来说，二进制程序是不可读的，根本看不出来机器干了什么。为了解决可读性的问题，以及偶尔的编辑需求，就诞生了汇编语言。</p>\n<hr>\n<h1 id=\"汇编语言的特点\"><a href=\"#汇编语言的特点\" class=\"headerlink\" title=\"汇编语言的特点\"></a>汇编语言的特点</h1><ul>\n<li><p>机器相关性：</p>\n<p>一种面向机器的低级语言，几乎接近机器语言</p>\n</li>\n<li><p>不可移植：</p>\n<p>不同类型的CPU有不同的机器指令系统，也就有不同的汇编语言</p>\n</li>\n<li><p>操作对象：</p>\n<p>汇编语言是直接面向处理器（Processor）的程序设计语言，它所操作的对象不是具体的数据,而是寄存器或者存储器</p>\n</li>\n<li><p>高速度和高效率：</p>\n<p>汇编语言保持了机器语言的优点，具有直接和简捷的特点，可有效地访问、控制计算机的各种硬件设备，如磁盘、存储器、CPU、I/O端口等，且占用内存少，执行速度快，是高效的程序设计语言</p>\n</li>\n<li><p>编写和调试的复杂性</p>\n<p>由于是直接控制硬件，且简单的任务也需要很多汇编语言语句，因此在进行程序设计时必须面面俱到，需要考虑到一切可能的问题，合理调配和使用各种软、硬件资源。这样，就不可避免地加重了程序员的负担。与此相同，在程序调试时，一旦程序的运行出了问题，就很难发现</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"汇编语言的组成\"><a href=\"#汇编语言的组成\" class=\"headerlink\" title=\"汇编语言的组成\"></a>汇编语言的组成</h1><h2 id=\"汇编指令\"><a href=\"#汇编指令\" class=\"headerlink\" title=\"汇编指令\"></a>汇编指令</h2><blockquote>\n<p>机器码的助记符，有对应的机器码，最终被cpu执行</p>\n</blockquote>\n<p>具体请参考<a href=\"https://blog.csdn.net/bjbz_cxy/article/details/79467688\">网页链接</a></p>\n<h2 id=\"伪指令\"><a href=\"#伪指令\" class=\"headerlink\" title=\"伪指令\"></a>伪指令</h2><blockquote>\n<p>没有对应的机器码，由编译器执行，计算机不执行</p>\n</blockquote>\n<h2 id=\"其它符号\"><a href=\"#其它符号\" class=\"headerlink\" title=\"其它符号\"></a>其它符号</h2><blockquote>\n<p>如+、-、*、/等，由编译器识别，没有对应的机器码</p>\n</blockquote>\n<p>以下为一段简单的汇编语言源程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assume cs:codesg</span><br><span class=\"line\">codesg segment</span><br><span class=\"line\">       mov ax,0123H</span><br><span class=\"line\">       mov bx,0456H</span><br><span class=\"line\">       add ax,bx</span><br><span class=\"line\">       add ax,ax</span><br><span class=\"line\">       </span><br><span class=\"line\">       mov ax,4c00</span><br><span class=\"line\">       int 21H</span><br><span class=\"line\">codesg ends</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>XXX segment,XXX ends,end,assume都是伪指令</p>\n</li>\n<li><p>mov,add，int 21H都是汇编指令</p>\n</li>\n<li><p><strong>补上一个注意细节：汇编语言时不允许数据用字母开头（重要！！）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov AX, FFFFH\t;这是错误写法，会报错！！</span><br><span class=\"line\">mov AX, 0FFFFH\t;这样写就对了，写个0为了使数据开头不是字母</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"编译器\"><a href=\"#编译器\" class=\"headerlink\" title=\"编译器\"></a>编译器</h1><p>编译器的作用，就是将高级语言写好的程序，翻译成一条条操作码。</p>\n<img src=\"/images/9.jpg\" height=\"400\" width=\"350\">\n\n\n\n<hr>\n<h1 id=\"寄存器-8086CPU\"><a href=\"#寄存器-8086CPU\" class=\"headerlink\" title=\"寄存器(8086CPU)\"></a>寄存器(8086CPU)</h1><blockquote>\n<p>CPU 还自带寄存器（register），用来储存最常用的数据。那些最频繁读写的数据（比如循环变量），都会放在寄存器里面，CPU 优先读写寄存器，再由寄存器跟内存交换数据。</p>\n</blockquote>\n<ul>\n<li><p>所有寄存器：AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW</p>\n</li>\n<li><p>AX、BX、CX、DX</p>\n<ul>\n<li>存放一般性数据的通用寄存器</li>\n<li>可分为两部分，如AX可以为AH和AL</li>\n</ul>\n</li>\n<li><p>CS、DS、SS、ES都是段寄存器</p>\n<ul>\n<li>在8086cpu中不支持将数据直接送入段寄存器中</li>\n</ul>\n</li>\n<li><p>CS和IP</p>\n<ul>\n<li>CS为代码段寄存器</li>\n<li>IP为指令指针寄存器</li>\n<li>CS和IP使cpu读取指定单元</li>\n</ul>\n</li>\n<li><p>DS</p>\n<p>DS通常用来存放要访问数据的段地址</p>\n<p>比如要读取10000H单元的数据，可以按如下程序段进行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov bx,1000H</span><br><span class=\"line\"></span><br><span class=\"line\">mov ds, bx(bx起中转作用)</span><br><span class=\"line\"></span><br><span class=\"line\">mov al,[0]([]代表一个内存单元，[]里面的数代表偏移地址，段地址默认为ds中的数据)</span><br></pre></td></tr></table></figure></li>\n<li><p>SS和SP</p>\n<ul>\n<li>栈顶的段地址存放在段寄存器SS中</li>\n<li>栈顶的偏移地址存放在寄存器SP中</li>\n<li>任何时候，SS：SP指向栈顶元素</li>\n<li>当有元素入栈后，SP=SP－2；当有元素出栈后,SP=SP＋2</li>\n<li>执行t命令时，执行与ss相关的指令后自动执行与sp相关的指令</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><blockquote>\n<p>寄存器只能存放很少量的数据，大多数时候，CPU 要指挥寄存器，直接跟内存交换数据。所以，除了寄存器，还必须了解内存怎么储存数据。</p>\n</blockquote>\n<h2 id=\"Heap（堆）\"><a href=\"#Heap（堆）\" class=\"headerlink\" title=\"Heap（堆）\"></a>Heap（堆）</h2><blockquote>\n<p>用户主动请求而划分出来的内存区域，叫做 Heap（堆）。它由起始地址开始，从低位（地址）向高位（地址）增长。</p>\n<p>Heap 的一个重要特点就是不会自动消失，必须手动释放，或者由垃圾回收机制来回收。</p>\n</blockquote>\n<p>程序运行的时候，操作系统会给它分配一段内存，用来储存程序和运行产生的数据。这段内存有起始地址和结束地址，比如从<code>0x1000</code>到<code>0x8000</code>，起始地址是较小的那个地址，结束地址是较大的那个地址。</p>\n<img src=\"/images/10.jpg\" height=\"600\" width=\"400\">\n\n<p>程序运行过程中，对于动态的内存占用请求（比如新建对象，或者使用<code>malloc</code>命令），系统就会从预先分配好的那段内存之中，划出一部分给用户，具体规则是从起始地址开始划分（实际上，起始地址会有一段静态数据，这里忽略）。举例来说，用户要求得到10个字节内存，那么从起始地址<code>0x1000</code>开始给他分配，一直分配到地址<code>0x100A</code>，如果再要求得到22个字节，那么就分配到<code>0x1020</code>。</p>\n<img src=\"/images/11.jpg\" height=\"600\" width=\"400\">\n\n<h2 id=\"Stack-栈\"><a href=\"#Stack-栈\" class=\"headerlink\" title=\"Stack(栈)\"></a>Stack(栈)</h2><blockquote>\n<p>除了内存模型 (Heap) 以外，其他的内存占用叫做 Stack（栈）。简单说，Stack 是由于函数运行而临时占用的内存区域。</p>\n<p>栈是一种具有特殊的访问方式的存储空间。特点为“先进后出，后进先出”</p>\n</blockquote>\n<h3 id=\"栈顶超界问题\"><a href=\"#栈顶超界问题\" class=\"headerlink\" title=\"栈顶超界问题\"></a>栈顶超界问题</h3><p>当栈顶超过了栈空间，栈外面的数据将被覆盖</p>\n<img src=\"/images/4.jpg\" height=\"400\" width=\"350\">\n\n<h3 id=\"栈段\"><a href=\"#栈段\" class=\"headerlink\" title=\"栈段\"></a>栈段</h3><blockquote>\n<p>在编程时，可以根据需要，将一组内存单元定义为一个段</p>\n</blockquote>\n<p>一个栈段最大可设为64KB（因为一个栈段最多从0~FFFFH）</p>\n<hr>\n<h1 id=\"数据宽度\"><a href=\"#数据宽度\" class=\"headerlink\" title=\"数据宽度\"></a>数据宽度</h1><blockquote>\n<p>在计算机中，由于受硬件的制约，数据都是有长度限制的，超过最多宽度的数据会被丢弃</p>\n</blockquote>\n<ul>\n<li>计算机中常见的数据宽度</li>\n</ul>\n<p>位（bit）、字节（byte）、字（word）、双字（doubleword）</p>\n<ul>\n<li>存储范围</li>\n</ul>\n<p>字节：0~0×FF</p>\n<p>字：0~0×FFFF</p>\n<p>双字：0~0×FFFFFFFF</p>\n<p>(“0×”代表十六进制)</p>\n<hr>\n<h1 id=\"存储单元\"><a href=\"#存储单元\" class=\"headerlink\" title=\"存储单元\"></a>存储单元</h1><ul>\n<li><p>电子计算机最小信息单位是bit,也就是一个二进制位</p>\n</li>\n<li><p>存储单元可以存储1byte，即两个十六进制位</p>\n</li>\n<li><p>存储单元从零开始顺序编号</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"总线\"><a href=\"#总线\" class=\"headerlink\" title=\"总线\"></a>总线</h1><ul>\n<li><p>地址总线</p>\n<ul>\n<li>N根地址线，则地址总线的宽度为N，寻址能力为2^N Byte</li>\n<li>内存地址空间大小受cpu地址总线宽度的限制</li>\n</ul>\n</li>\n<li><p>数据总线</p>\n<p>N根数据总线一次传输N个二进制位</p>\n</li>\n<li><p>控制总线</p>\n<p>控制总线的宽度决定了cpu对外部器件的控制能力</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"存储器\"><a href=\"#存储器\" class=\"headerlink\" title=\"存储器\"></a>存储器</h1><blockquote>\n<p>从读写属性分类</p>\n</blockquote>\n<ul>\n<li><p>随机存储器(RAM)</p>\n<p>用于存放供cpu使用的绝大部分程序和数据(可随时读写，但一旦断电，数据就会消失)</p>\n</li>\n<li><p>只读存储器(ROM)</p>\n<p>只能读出无法写入信息，信息一旦写入后就固定下来，即使切断电源，信息也不会丢失，所以又称为固定存储器</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"debug命令\"><a href=\"#debug命令\" class=\"headerlink\" title=\"debug命令\"></a>debug命令</h1><blockquote>\n<p>debug是一个DOS实用程序，是供程序员使用的程序调试工具，可以用它检查内存中任何地方的字节以及修改任何地方的字节。它可以用于逐指令执行某个程序以验证程序运行的正确性，也可以追踪执行过程、比较一个指令执行前后的值以及比较与移动内存中数据的范围，读写文件与磁盘</p>\n</blockquote>\n<p>具体请参考<a href=\"https://blog.csdn.net/liuer2004_82/article/details/52638516\">网页连接</a></p>\n<blockquote>\n<p>由于win10不再像win7可以直接进入debug模式，所以需要其它方法进入</p>\n</blockquote>\n<p>如何进入debug模式请参考我的另一篇文章</p>\n<p><a href=\"https://eli0t-g.github.io/2020/12/07/dos/\">win64位系统进入debug</a></p>\n<hr>\n<h1 id=\"程序从写出到执行的过程\"><a href=\"#程序从写出到执行的过程\" class=\"headerlink\" title=\"程序从写出到执行的过程\"></a>程序从写出到执行的过程</h1><ul>\n<li><p>编写</p>\n<p>在<!--编译器-->上编写代码，结果是产生了一个存储源代码的文本文件</p>\n<p><strong>编译器是一种特殊的程序，它可以把以特定编程语言写成的程序变为机器可以运行的机器码。</strong></p>\n</li>\n<li><p>编译链接</p>\n<ul>\n<li><p>编译</p>\n<p>编译的意思就是把程序语言写成机器可以运行的机器码的过程，此过程需要用到编译器。</p>\n</li>\n<li><p>连接</p>\n<p>在对源程序进行编译得到目标文件后，我们需要对目标文件进行连接，从而得到可执行文件。</p>\n<p><strong>对于连接的过程，可执行文件是我们要得到的最终结果</strong></p>\n<p>其作用：</p>\n<ul>\n<li>当源程序很大时，可以将它分为多个源程序文件来编译，每个源程序编译成为目标文件后，再用连接程序将它们连接到一起，生成一个可执行文件</li>\n<li>程序中调用了某个库文件中的子程序，需要将这个库文件和该程序生成的目标文件连接到一起，生成一个可执行 文件</li>\n<li>一个源程序编译后，得到了存有机器码的目标文件，目标文件中的有些内容还不能直接用来生成可执行文件，连接程序将这些内容处理为最终的可执行信息。所以，在只有一个源程序文件，而又不需要调用某个库中的子程序的情况下，也必须用连接程序对目标文件进行处理，生成可执行文件。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>执行</p>\n<p>操作系统依照可执行文件中的描述信息，将可执行文件中的机器码和数据加载入内存，并进行相关的初始化，然后由CPU执行程序</p>\n</li>\n</ul>\n","text":"学习目的通过用汇编语言进行编程而深入地理解计算机底层的基本工作机理，达到随心所欲地控制计算机的目的 汇编语言的由来对于人类来说，二进制程序是不可读的，根本看不出来机器干了什么。为了解决可读性的问题，以及偶尔的编辑需求，就诞生了汇编语言。 汇编语言的特点 机器相关性： 一种面向机器...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"基础知识","slug":"基础知识","count":4,"path":"api/categories/基础知识.json"}],"tags":[{"name":"Assembly Language","slug":"Assembly-Language","count":2,"path":"api/tags/Assembly-Language.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%A6%E4%B9%A0%E7%9B%AE%E7%9A%84\"><span class=\"toc-text\">学习目的</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9A%84%E7%94%B1%E6%9D%A5\"><span class=\"toc-text\">汇编语言的由来</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">汇编语言的特点</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BB%84%E6%88%90\"><span class=\"toc-text\">汇编语言的组成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">汇编指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%AA%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">伪指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E5%AE%83%E7%AC%A6%E5%8F%B7\"><span class=\"toc-text\">其它符号</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E5%99%A8\"><span class=\"toc-text\">编译器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8-8086CPU\"><span class=\"toc-text\">寄存器(8086CPU)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">内存模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Heap%EF%BC%88%E5%A0%86%EF%BC%89\"><span class=\"toc-text\">Heap（堆）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Stack-%E6%A0%88\"><span class=\"toc-text\">Stack(栈)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%88%E9%A1%B6%E8%B6%85%E7%95%8C%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">栈顶超界问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%88%E6%AE%B5\"><span class=\"toc-text\">栈段</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%AE%BD%E5%BA%A6\"><span class=\"toc-text\">数据宽度</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%8D%95%E5%85%83\"><span class=\"toc-text\">存储单元</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BA%BF\"><span class=\"toc-text\">总线</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">存储器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#debug%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">debug命令</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E4%BB%8E%E5%86%99%E5%87%BA%E5%88%B0%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">程序从写出到执行的过程</span></a></li></ol>","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C语言基础知识","uid":"062329fe746a623bd0d6f959084d4dc0","slug":"C","date":"2020-12-10T02:18:47.000Z","updated":"2021-05-01T15:08:37.617Z","comments":true,"path":"api/articles/C.json","keywords":null,"cover":[],"text":"原本早就开始学习C语言，但是因为过于心急直接开始实操（如果只是对C语言感兴趣或者想要了解一下C语言，个人推荐《啊哈C》），最后发现学习难以进行下去，于是重新开始再学一遍。在学习C语言之前，个人建议先学习汇编语言，汇编语言可以加深对计算机的理解，方便日后的学习。 初步认识C 语言是...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"基础知识","slug":"基础知识","count":4,"path":"api/categories/基础知识.json"}],"tags":[{"name":"C","slug":"C","count":1,"path":"api/tags/C.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"markdown语法","uid":"53611955a6f979c71a5255210a5666f4","slug":"markdown","date":"2020-12-07T12:33:55.000Z","updated":"2021-03-18T11:08:28.325Z","comments":true,"path":"api/articles/markdown.json","keywords":null,"cover":[],"text":" 搭建好博客后没有直接开始写文章是因为写文章时遇到了很多问题，之后去b站和百度上了解了一下，学到了一些关于markdown语法的使用方法，在此分享一下 标题“#”一级标题 “##”二级标题 ……（共六级标题，“#”后面要空一格） 效果如图 引用&lt;一级引用 &lt;&lt;二...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"笔记","slug":"笔记","count":2,"path":"api/categories/笔记.json"}],"tags":[{"name":"学习","slug":"学习","count":2,"path":"api/tags/学习.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}