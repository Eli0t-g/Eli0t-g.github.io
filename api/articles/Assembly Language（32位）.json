{"title":"Assembly Language（32位）","uid":"0b2fb954c183833919bf074ef85f5195","slug":"Assembly Language（32位）","date":"2021-03-22T12:41:01.000Z","updated":"2021-05-06T05:49:19.979Z","comments":true,"path":"api/articles/Assembly Language（32位）.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/qmWPp4rYHZIQjJd.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>重新复习了一遍汇编，这次看的是32位的，有了一点点收获，就随便写写</p></blockquote>\n<h1 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h1><img src=\"/images/58.png\" height=\"400\" width=\"350\" />\n\n<p>x86的寄存器包括8位、16位、32位，其中32位寄存器可以分为16位或者8位，如EAX可以分为16位AX或者8位AH、AL，但是EBX以后的寄存器就不可以了，虽然是通用寄存器但是每个通用寄存器都有一些特殊的用途</p>\n<h2 id=\"EAX\"><a href=\"#EAX\" class=\"headerlink\" title=\"EAX\"></a>EAX</h2><p>EAX与STOS指令相关，STOS会将EAX的值存进EDI指定的内存单元中，同时还经常存储计算结果</p>\n<h2 id=\"ECX\"><a href=\"#ECX\" class=\"headerlink\" title=\"ECX\"></a>ECX</h2><p>ECX与REP指令相关，用于记录指令循环次数</p>\n<h2 id=\"EDI和ESI\"><a href=\"#EDI和ESI\" class=\"headerlink\" title=\"EDI和ESI\"></a>EDI和ESI</h2><p>EDI和ESI用于做地址复制，将ESI指定的地址中的值赋值到EDI指定的地址中，与movs指令有很大关系</p>\n<img src=\"/images/59.png\" height=\"400\" width=\"700\" />\n\n<h2 id=\"ESP\"><a href=\"#ESP\" class=\"headerlink\" title=\"ESP\"></a>ESP</h2><p>ESP用于存储当前栈堆用到的地址</p>\n<h2 id=\"EFL（标志寄存器）\"><a href=\"#EFL（标志寄存器）\" class=\"headerlink\" title=\"EFL（标志寄存器）\"></a>EFL（标志寄存器）</h2><p>EFI的第十位（DF）如果是零，使用push，pop指令后ESP会加相应数值，如果是一，则减去相应数值。</p>\n<h2 id=\"EIP\"><a href=\"#EIP\" class=\"headerlink\" title=\"EIP\"></a>EIP</h2><p>EIP用于存储计算机执行下一个指令的地址</p>\n<h1 id=\"堆栈\"><a href=\"#堆栈\" class=\"headerlink\" title=\"堆栈\"></a>堆栈</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>堆栈本质就是一段内存，在程序启动前就已经被分配好了，堆栈会存储程序重要的信息，被称为“程序的心脏”</p></blockquote>\n<p>32位上的应用大部分采用小端模式，手机上的应用大部分采用大端模式</p>\n<h2 id=\"小段模式\"><a href=\"#小段模式\" class=\"headerlink\" title=\"小段模式\"></a>小段模式</h2><p>从高地址开始存放，往低地址去</p>\n<h2 id=\"大端模式\"><a href=\"#大端模式\" class=\"headerlink\" title=\"大端模式\"></a>大端模式</h2><p>从低地址开始存放，往高地址去</p>\n<h1 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h1><h2 id=\"MOV-移动指令\"><a href=\"#MOV-移动指令\" class=\"headerlink\" title=\"MOV(移动指令)\"></a>MOV(移动指令)</h2><p>将指定的值移动指定位置（内存地址或寄存器）</p>\n<h2 id=\"ADD-加法指令\"><a href=\"#ADD-加法指令\" class=\"headerlink\" title=\"ADD(加法指令)\"></a>ADD(加法指令)</h2><p>将指定的两个值相加，结果返回到指定位置（内存地址或寄存器）</p>\n<h2 id=\"SUB-减法指令\"><a href=\"#SUB-减法指令\" class=\"headerlink\" title=\"SUB(减法指令)\"></a>SUB(减法指令)</h2><p>将指定的两个值相减，结果返回到指定位置（内存地址或寄存器）</p>\n<h2 id=\"AND-与运算指令\"><a href=\"#AND-与运算指令\" class=\"headerlink\" title=\"AND(与运算指令)\"></a>AND(与运算指令)</h2><p>与运算：两个为一才为一</p>\n<p>将指定的两个值进行与运算，结果返回到指定位置（内存地址或寄存器）</p>\n<h2 id=\"OR-或运算指令\"><a href=\"#OR-或运算指令\" class=\"headerlink\" title=\"OR(或运算指令)\"></a>OR(或运算指令)</h2><p>或运算：有一就为一</p>\n<p>将指定的两个值进行或运算，结果返回到指定位置（内存地址或寄存器）</p>\n<h2 id=\"XOR-异或运算指令\"><a href=\"#XOR-异或运算指令\" class=\"headerlink\" title=\"XOR(异或运算指令)\"></a>XOR(异或运算指令)</h2><p>异或运算：不一样为一</p>\n<p>将指定的两个值进行异或运算，结果返回到指定位置（内存地址或寄存器）</p>\n<h2 id=\"NOT-非运算指令\"><a href=\"#NOT-非运算指令\" class=\"headerlink\" title=\"NOT(非运算指令)\"></a>NOT(非运算指令)</h2><p>非运算：一为零，零为一</p>\n<p>将指定的一个值进行非运算，结果返回原位置（内存地址或寄存器）</p>\n<h2 id=\"SHL-左移指令\"><a href=\"#SHL-左移指令\" class=\"headerlink\" title=\"SHL(左移指令)\"></a>SHL(左移指令)</h2><p>shl（C语言：&lt;&lt;）</p>\n<p>高位丢弃,低位补零</p>\n<h2 id=\"右移指令\"><a href=\"#右移指令\" class=\"headerlink\" title=\"右移指令\"></a>右移指令</h2><p>汇编 shr：高位补零，低位丢弃</p>\n<p>​         sar：高位补符号位，地位丢弃（就是补最高位的数字）</p>\n<p>C语言 &gt;&gt; 无符号数：高位补零，低位丢弃</p>\n<p>​                 有符号数：高位补符号位，低位丢弃</p>\n","text":" 重新复习了一遍汇编，这次看的是32位的，有了一点点收获，就随便写写 寄存器 x86的寄存器包括8位、16位、32位，其中32位寄存器可以分为16位或者8位，如EAX可以分为16位AX或者8位AH、AL，但是EBX以后的寄存器就不可以了，虽然是通用寄存器但是每个通用寄存器都有一些...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"基础知识","slug":"基础知识","count":3,"path":"api/categories/基础知识.json"}],"tags":[{"name":"Assembly Language","slug":"Assembly-Language","count":2,"path":"api/tags/Assembly-Language.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">寄存器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#EAX\"><span class=\"toc-text\">EAX</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ECX\"><span class=\"toc-text\">ECX</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#EDI%E5%92%8CESI\"><span class=\"toc-text\">EDI和ESI</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ESP\"><span class=\"toc-text\">ESP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#EFL%EF%BC%88%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%89\"><span class=\"toc-text\">EFL（标志寄存器）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#EIP\"><span class=\"toc-text\">EIP</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A0%86%E6%A0%88\"><span class=\"toc-text\">堆栈</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E6%AE%B5%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">小段模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">大端模式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MOV-%E7%A7%BB%E5%8A%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">MOV(移动指令)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ADD-%E5%8A%A0%E6%B3%95%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">ADD(加法指令)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SUB-%E5%87%8F%E6%B3%95%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">SUB(减法指令)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AND-%E4%B8%8E%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">AND(与运算指令)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#OR-%E6%88%96%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">OR(或运算指令)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#XOR-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">XOR(异或运算指令)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NOT-%E9%9D%9E%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">NOT(非运算指令)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SHL-%E5%B7%A6%E7%A7%BB%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">SHL(左移指令)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%B3%E7%A7%BB%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">右移指令</span></a></li></ol></li></ol>","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"指针","uid":"4c0cb40856baa1e8384c37c457fb63f6","slug":"指针","date":"2021-03-28T02:54:43.000Z","updated":"2021-05-06T05:14:32.313Z","comments":true,"path":"api/articles/指针.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/wsVhg4mf8uJx3Q1.jpg","text":" 指针，并不像一些书上写的只是用于存储地址，它是一种类型数据，存储什么都可以，并不是只能存储地址。 指针大小常见的指针有：char *，int *，float * …，但char * * *，int * * *…同样也是指针(多级指针)，同时虽然指针类型有很多种，但是无论是什么指...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"C语言","slug":"C语言","count":4,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":4,"path":"api/tags/收获.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"SSH连接失败及hexo命令失效","uid":"9f625a615c8ebfb571548bd146557e6b","slug":"SSH连接失败及hexo命令失效","date":"2021-03-15T13:29:03.000Z","updated":"2021-05-07T04:00:11.705Z","comments":true,"path":"api/articles/SSH连接失败及hexo命令失效.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/7i8qWzNbymFGLM6.jpg","text":" 闲的无聊就整了一下博客，结果出大问题了，之前的备份又删了，所以不得不重建，这次重建花了整整一天，虽说浪费时间但是还是有所收获 搭建博客视频网上一大堆，这里就不多讲了，这里就讲一下错误和如何解决 ssh: connect to host github.com port 22: C...","link":"","photos":[],"count_time":{"symbolsCount":888,"symbolsTime":"1 mins."},"categories":[{"name":"问题","slug":"问题","count":2,"path":"api/categories/问题.json"}],"tags":[{"name":"博客","slug":"博客","count":2,"path":"api/tags/博客.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}