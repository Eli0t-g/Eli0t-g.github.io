{"title":"C语言基础知识","uid":"062329fe746a623bd0d6f959084d4dc0","slug":"C","date":"2020-12-10T02:18:47.000Z","updated":"2021-05-06T05:49:57.957Z","comments":true,"path":"api/articles/C.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/k5FfrtVGSqydAO8.jpg","content":"<p><em>原本早就开始学习C语言，但是因为过于心急直接开始实操（如果只是对C语言感兴趣或者想要了解一下C语言，个人推荐《啊哈C》），最后发现学习难以进行下去，于是重新开始再学一遍。在学习C语言之前，个人建议先学习汇编语言，汇编语言可以加深对计算机的理解，方便日后的学习。</em></p>\n<h1 id=\"初步认识\"><a href=\"#初步认识\" class=\"headerlink\" title=\"初步认识\"></a>初步认识</h1><p>C 语言是一种通用的、面向过程式的计算机程序设计语言，C 语言是一种通用的高级语言。C语言的特点有：</p>\n<ul>\n<li>易于学习</li>\n<li>结构化语言</li>\n<li>它产生高效率的程序</li>\n<li>它可以处理底层的活动</li>\n<li>它可以在多种计算机平台上编译</li>\n</ul>\n<hr>\n<h1 id=\"C语言程序的结构\"><a href=\"#C语言程序的结构\" class=\"headerlink\" title=\"C语言程序的结构\"></a>C语言程序的结构</h1><p><strong>C语言程序主要是有函数构成，函数是C语言程序的基本单位。</strong>一个C语言源程序必须有一个main函数（也叫主函数），其中可以包含一个main函数和若干个其他函数，但<strong>C语言程序主函数只能有1个。C程序中main()称之为主函数，是所有程序运行的入口。</strong>同时，<strong>程序执行总是从main函数开始，如果有有其他函数，则完成对其他函数的调用后再返回到主函数，最后由main函数结束整个程序。</strong></p>\n<h2 id=\"函数组成\"><a href=\"#函数组成\" class=\"headerlink\" title=\"函数组成\"></a>函数组成</h2><p>函数首部，函数体</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span>                  <span class=\"comment\">//主函数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;    <span class=\"comment\">//对调用函数max的声明</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,z;               <span class=\"comment\">//定义整数型变量x,y,z</span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;x,&amp;y);      <span class=\"comment\">//输入变量x,y的值</span></span><br><span class=\"line\">    z=max (x,y);             <span class=\"comment\">//调用函数max，将得到的值赋给z</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Max is %d\\n&quot;</span>,z); <span class=\"comment\">//输出z</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span>         <span class=\"comment\">//定义max函数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;                            <span class=\"comment\">//定义变量z为整数型</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> z;                   <span class=\"comment\">//如果x&gt;y，则将x的值赋给变量z</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&gt;y) z=x;            <span class=\"comment\">//否则，将y的值赋给变量z </span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> z=y;                <span class=\"comment\">//将z的值返回到主函数中调用函数的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (z);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>int main()和int max(int x,int y)都是函数首部</p>\n</li>\n<li><p>函数下面的{}内的部分是函数体。函数体包括<strong>声明部分</strong>和<strong>执行部分</strong></p>\n</li>\n</ul>\n<h1 id=\"运行C程序的步骤\"><a href=\"#运行C程序的步骤\" class=\"headerlink\" title=\"运行C程序的步骤\"></a>运行C程序的步骤</h1><p>1、上机输入和编辑源程序</p>\n<p>2、对源程序进行编译</p>\n<p>3、进行连接处理</p>\n<p>4、运行可执行程序，得到运行结果</p>\n<img src=\"/images/14.jpg\" height=\"500\" width=\"350\"/>\n\n<hr>\n<h1 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h1><p><strong>算法+数据结构=程序</strong></p>\n<ul>\n<li><p><strong>数据结构</strong></p>\n<p>在程序中要指定用哪些数据和这些数据的类型以及数据的组织形式，这就是数据结构</p>\n</li>\n<li><p><strong>算法</strong></p>\n<p>算法是解决“做什么”和“怎么做”的问题。程序中的操作语句，就是算法的体现</p>\n<p>表示算法的方法：自然语言、传统流程图、结构化流程图、伪代码等</p>\n</li>\n</ul>\n<h1 id=\"数型类型（64位）\"><a href=\"#数型类型（64位）\" class=\"headerlink\" title=\"数型类型（64位）\"></a>数型类型（64位）</h1><table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th>字节数</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">char(字符型)</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">float(浮点型)</td>\n<td>4</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">double(浮点型)</td>\n<td>8</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">[ signed] int (基本整型)</td>\n<td>4</td>\n<td>-2^31~2^31-1</td>\n</tr>\n<tr>\n<td align=\"left\">unsigned int (无符号基本整型)</td>\n<td>4</td>\n<td>0~2^31-1）</td>\n</tr>\n<tr>\n<td align=\"left\">[ signed ]short [ int ] (短整型)</td>\n<td>2</td>\n<td>-2^15~2^15-1</td>\n</tr>\n<tr>\n<td align=\"left\">unsigned short [ int ] (无符号短整型)</td>\n<td>2</td>\n<td>0~2^16-1</td>\n</tr>\n<tr>\n<td align=\"left\">long [int] (长整型)</td>\n<td>4</td>\n<td>-2^31~2^31-1</td>\n</tr>\n<tr>\n<td align=\"left\">unsigned long [ int ] (无符号长整型)</td>\n<td>4</td>\n<td>0~4294967295</td>\n</tr>\n<tr>\n<td align=\"left\">long long [ int ] (双长型)(c99支持)</td>\n<td>8</td>\n<td>-2^63~2^63-1</td>\n</tr>\n<tr>\n<td align=\"left\">unsigned long long [ int ] (无符号双长整型)</td>\n<td>8</td>\n<td>0~2^64-1</td>\n</tr>\n</tbody></table>\n<p><em>long int(long)和int的区别：虽然都是4字节没什么区别，但是这是在64位的标准，如果在16位或者在32位的电脑上面就不一定是都是4字节，16位机：int的取值位16位，long int的取值为32位；32位机：int的取值位32位，long int的取值为32位；64位机：int的取值位32位，long int的取值为32位，所以会满足下面的关系</em>。</p>\n<p><strong>long≥int≥short</strong></p>\n<h1 id=\"格式化输入输出\"><a href=\"#格式化输入输出\" class=\"headerlink\" title=\"格式化输入输出\"></a>格式化输入输出</h1><h2 id=\"输出数据\"><a href=\"#输出数据\" class=\"headerlink\" title=\"输出数据\"></a>输出数据</h2><p>输出字符串需要%s (%5.2s其中5的意思是长度，2的意思是保留个数) //比如输出hello字符串，%5.2s就会输出：   he</p>\n<p>输出 char 类型数据需要  %c</p>\n<p>输出 float 类型数据需要  %f (默认是六位小数，如果想控制保留的位数需加“.x”x是所要保留的位数，如保留两位小数：%.2f)</p>\n<p>输出 double 类型数据需要  %f</p>\n<p>输出 int 类型数据需要  %d (如果d前面加数字意思时补位)</p>\n<p>输出 unsigned int 类型数据需要  %u</p>\n<p>输出 short 类型数据需要  %hd</p>\n<p>输出 unsigned short 类型数据需要  %u</p>\n<p>输出 long 类型数据需要  %ld(也可以使用%d，但是这会给程序移植到其他系统（这两种数据类型的长度不一样的系统）带来麻烦，所以建议使用%ld)</p>\n<p>输出 unsigned long 类型数据需要  %lu</p>\n<p>输出 long long 类型数据需要  %lld</p>\n<p>输出 unsigned long long 类型数据需要  %llu</p>\n<p>输出 变量地址需要%p</p>\n<p>*<em>在%后面加 * 是指宽度（自己决定），例如：printf(“%<em>d”,width,a)</em></em></p>\n<p><strong>float 和 double 虽然类型都是浮点型，但是double双精度更为精确，但是double更占内存，所以要根据情况而定。</strong></p>\n<p><strong>不同位数计算机中数据类型所占字节数有些不同，上述所述为32位计算机</strong></p>\n<p><strong>如果规定输出格式，如输出的数据必须为八进制或十六进制则需要以下方式输出</strong></p>\n<h2 id=\"按特定格式输出\"><a href=\"#按特定格式输出\" class=\"headerlink\" title=\"按特定格式输出\"></a>按特定格式输出</h2><p>八进制：%o  %#o(格式化)</p>\n<p>十六进制：%x  %#x(格式化)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\ta=<span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%O  %#o \\n&quot;</span>,a,a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%X  %#x&quot;</span>,a,a);</span><br><span class=\"line\">\tgetchar(); </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<img src=\"/images/56.png\" height=\"400\" width=\"400\" />\n\n<h2 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h2><p>输出“ ？”：/？</p>\n<p>输出 “/” ：//</p>\n<p>输出 “%” ：%%</p>\n<p>断行（就是输出太多，一行放不下，需要另起一行）：/</p>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><p>printf返回值一般是用于检测是否打印错误，返回值是输出字符的个数（scanf的返回值也是如此）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rv;</span><br><span class=\"line\">    rv=<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello World\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,rv);</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<img src=\"/images/56.png\" height=\"300\" width=\"400\" />\n\n<p>rv=printf(“Hello World”)这一行的作用一是打印Hello World,而是将printf的返回值赋给rv（“\\n”算一个）</p>\n<h2 id=\"scanf输入\"><a href=\"#scanf输入\" class=\"headerlink\" title=\"scanf输入\"></a>scanf输入</h2><p>scanf用法和printf类似，要注意的是scanf读取一个数的时候要加地址符&amp;，<strong>但如果是数组则不需要加（因为数组的名字就是地址，不需要再寻找</strong></p>\n<p><strong>输入double时不是 ”%f“ 而是 ”%lf“，而float则是 “%f”</strong></p>\n<p><strong>输入时读取到空格和回车视为读取结束</strong></p>\n<p>如果输入时一开始就是空格，那么计算机就会一直往后读取直到遇到数字或者符号（例外%c可以读取空格）</p>\n<p>%后面加 “ * ” 意思是丢弃不读入，如：scanf(“%*d %c”,&amp;a)，其中a的值是读入的%c，前面的直接被丢弃</p>\n<hr>\n<h1 id=\"输入、输出函数\"><a href=\"#输入、输出函数\" class=\"headerlink\" title=\"输入、输出函数\"></a>输入、输出函数</h1><p>前面讲了格式化输入输出，但发现仅仅使用格式化输入输出有时会显得十分繁琐，所以需要我们学习其它的输入输出函数</p>\n<h2 id=\"字符输入输出（getchar-putchar）\"><a href=\"#字符输入输出（getchar-putchar）\" class=\"headerlink\" title=\"字符输入输出（getchar/putchar）\"></a>字符输入输出（getchar/putchar）</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>有些时候，仅仅为了在显示器屏幕上打印或从控制台获取一个字符，此时使用功能强大的printf与scanf函数，则显得过于繁琐，C提供了一个库函数putchar/getchar来完成这个简单的任务。</p></blockquote>\n<p>getchar()函数只能读取单个字符，有时只读取一个字符（注意是以字符的形式存储）时较为方便，例：a=getchar();scanf(“%c”,&amp;a);</p>\n<p>putchar()函数是字符输出函数， 其功能是在显示器上打印单个字符。putchar函数是一个标准的C语言库函数，它的函数原型在头文件“stdio.h”中。</p>\n<p><strong>scanf与getchar</strong></p>\n<p>首先，我们输入时，比没有直接被读取，而是先存放在缓冲区，在被读取。知道这个原理后就可以比较scanf和getchar，拿一个例子来讲解</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;b);</span><br><span class=\"line\">    c=getchar();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %c&quot;</span>,a,b,c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输入：1 &lt;回车&gt;2</p>\n<p>输出结果是：第一行：1 2  第二行： </p>\n<p>首先，输入1 回车后，1会存进变量a中，而回车还会停留在缓冲区，之后输入2，此时缓冲区存放了回车和2，但是scanf是无法读取回车，所以回车被跳过，2存进了变量b中，因为scanf可以读取回车（即换行），所以缓冲区的回车就会进入c中，最后就会输出如上结果</p>\n<h2 id=\"字符串输入输出函数-（gets与puts）\"><a href=\"#字符串输入输出函数-（gets与puts）\" class=\"headerlink\" title=\"字符串输入输出函数 （gets与puts）\"></a>字符串输入输出函数 （gets与puts）</h2><p>gets函数从标准输入设备读字符串函数。可以无限读取，不会判断上限，以回车结束读取，所以程序员应该确保buffer的空间足够大，以便在执行读操作时不发生溢出。此函数在stdio.h头文件中定义的。当然，scanf也可以做到。例如：gets(a);scanf(“%[ ^\\n ]”,a)（其中a是数组）</p>\n<p>puts函数功能非常单一，在显示器屏幕上输出一个字符串，并换行。</p>\n<h1 id=\"define\"><a href=\"#define\" class=\"headerlink\" title=\"define\"></a>define</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>之所以单独拿出来讲，是因为容易出错</p></blockquote>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>**#define 标识符 常量 ** //注意, 最后没有分号，同时标识符和常量间只有一个空格</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>define作用类似于赋值，但它更加灵活，可以将用一些字符代替字符串，如：</p>\n<p>#define A “nihao”；#define A 0；#define A ‘a’</p>\n<p><strong>因为nihao是字符串，所以需要加双引号，如果只是数字就不需要，如果是字符就需要单引号。除此之外，虽然没有硬性规定define后面定义的字符要大写，但一般都是要遵守的</strong></p>\n<h2 id=\"易错点\"><a href=\"#易错点\" class=\"headerlink\" title=\"易错点\"></a>易错点</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 3+1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    a=M*M/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a);</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码输出结果很容易被认为是8，但实际输出结果是6</p>\n<p>错误原因：</p>\n<p>首先，M被定义为3+1，在计算a前不会编译器不会先计算3+1而是直接将3+1带入进去，所以a=M * M/2就变成了a=3+1 * 3+1,之后因为M是整型数据，所以会把小数点后面的数丢弃所以最终答案为6</p>\n<h2 id=\"与const的区别\"><a href=\"#与const的区别\" class=\"headerlink\" title=\"与const的区别\"></a>与const的区别</h2><ul>\n<li>编译器处理方式不同<br> 　#define宏是在预处理阶段展开。<pre><code>　const常量是编译运行阶段使用。\n</code></pre>\n</li>\n<li>类型和安全检查不同<br> 　#define宏没有类型，不做任何类型检查，仅仅是展开。<pre><code>　const常量有具体的类型，在编译阶段会执行类型检查。\n</code></pre>\n</li>\n<li>存储方式不同<br> 　#define宏仅仅是展开，有多少地方使用，就展开多少次，不会分配内存。（宏定义不分配内存，变量定义分配内存。）<pre><code>　const常量会在内存中分配(可以是堆中也可以是栈中)。\n</code></pre>\n</li>\n<li>const  可以节省空间，避免不必要的内存分配。 例如：<br> #define NUM 3.14159  //常量宏<br> const doulbe Num = 3.14159; //此时并未将Pi放入ROM中 ……<br> double i = Num; //此时为Pi分配内存，以后不再分配！<br> double  I= NUM; //编译期间进行宏替换，分配内存<br> double j = Num; //没有内存分配<br> double J = NUM; //再进行宏替换，又一次分配内存！<br> const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是象#define一样给出的是立即数，所以，const定义的常量在程序运行过程中只有一份拷贝（因为是全局的只读变量，存在静态区），而 #define定义的常量在内存中有若干个拷贝。</li>\n<li>提高了效率。 编译器通常不为普通const常量分配存储空间，而是将它们保存在符号表中，这使得它成为一个编译期间的常量，没有了存储与读内存的操作，使得它的效率也很高。</li>\n<li>宏替换只作替换，不做计算，不做表达式求解;<br> 宏预编译时就替换了，程序运行时，并不分配内存。</li>\n</ul>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><p>i++与++i的区别（i–和–i同理）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,i++,++i);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,i,i);</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p>1 2</p>\n<p>2 2</p>\n<p>i++是运行这条指令后加一，而++i是运行前加一，所以会出现一开始输出1 2这种情况，同时，递增（递减）的运算优先级很高，只有圆括号比它高，所以使用时需注意，例如，<strong>a * b++不会等于a*b+1而是（a) * （b+1）</strong>。</p>\n<p>不同类型数据运算：</p>\n<p>不同类型数据进行计算时，编译器会将低精度数据转化为高精度，如</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> b;</span><br><span class=\"line\">    print(<span class=\"string\">&quot;%d&quot;</span>,a/b);</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在运算a/b时，a会自动升级为float型，当然，也可以强制转化，在a前面加（float）就可以使a转换为float型</p>\n<h1 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h1><h2 id=\"无参数\"><a href=\"#无参数\" class=\"headerlink\" title=\"无参数\"></a>无参数</h2><h3 id=\"有返回值\"><a href=\"#有返回值\" class=\"headerlink\" title=\"有返回值\"></a>有返回值</h3><p>如果函数不接收用户传递的数据，那么定义时可以不带参数。如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType functionName()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &#x2F;&#x2F;body</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>dataType 是返回值类型，它可以是C语言中的任意数据类型，例如 int、float、char 等。</p>\n</li>\n<li><p>functionName 是函数名，它是<a href=\"http://c.biancheng.net/cpp/html/2927.html\">标识符</a>的一种，命名规则和标识符相同。函数名后面的括号<code>( )</code>不能少。</p>\n</li>\n<li><p>body 是函数体，它是函数需要执行的代码，是函数的主体部分。即使只有一个语句，函数体也要由<code>&#123; &#125;</code>包围。</p>\n</li>\n<li><p>如果有返回值，在函数体中使用 return 语句返回。return 出来的数据的类型要和 dataType 一样。</p>\n<p>例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">100</span>; i++)&#123;</span><br><span class=\"line\">        sum+=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"无返回值函数\"><a href=\"#无返回值函数\" class=\"headerlink\" title=\"无返回值函数\"></a>无返回值函数</h3><p>有的函数不需要返回值，或者返回值类型不确定（很少见），那么可以用 void 表示，例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span> (<span class=\"string\">&quot;Hello,world \\n&quot;</span>);    <span class=\"comment\">//没有返回值就不需要 return 语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"有参函数的定义\"><a href=\"#有参函数的定义\" class=\"headerlink\" title=\"有参函数的定义\"></a>有参函数的定义</h2><p>如果函数需要接收用户传递的数据，那么定义时就要带上参数。如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">dataType <span class=\"title\">functionName</span><span class=\"params\">( dataType1 param1, dataType2 param2 ... )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//body</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>dataType1 param1, dataType2 param2 ...</code>是参数列表。函数可以只有一个参数，也可以有多个，多个参数之间由<code>,</code>分隔。参数本质上也是变量，定义时要指明类型和名称。与无参函数的定义相比，有参函数的定义仅仅是多了一个参数列表。</p>\n<p>例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//计算从m加到n的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = m+<span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">        m += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, total;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Input two numbers: &quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">    total = sum(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a=%d, b=%d\\n&quot;</span>, a, b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;total=%d\\n&quot;</span>, total);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>函数定义处的 m、n 是形参，函数调用处的 a、b 是实参</p>\n","text":"原本早就开始学习C语言，但是因为过于心急直接开始实操（如果只是对C语言感兴趣或者想要了解一下C语言，个人推荐《啊哈C》），最后发现学习难以进行下去，于是重新开始再学一遍。在学习C语言之前，个人建议先学习汇编语言，汇编语言可以加深对计算机的理解，方便日后的学习。 初步认识C 语言是...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"基础知识","slug":"基础知识","count":4,"path":"api/categories/基础知识.json"}],"tags":[{"name":"C","slug":"C","count":1,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86\"><span class=\"toc-text\">初步认识</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">C语言程序的结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%BB%84%E6%88%90\"><span class=\"toc-text\">函数组成</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8CC%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">运行C程序的步骤</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">程序</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%9E%8B%E7%B1%BB%E5%9E%8B%EF%BC%8864%E4%BD%8D%EF%BC%89\"><span class=\"toc-text\">数型类型（64位）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">格式化输入输出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">输出数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%89%E7%89%B9%E5%AE%9A%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">按特定格式输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">特殊字符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">返回值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#scanf%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">scanf输入</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E3%80%81%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">输入、输出函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%EF%BC%88getchar-putchar%EF%BC%89\"><span class=\"toc-text\">字符输入输出（getchar&#x2F;putchar）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0-%EF%BC%88gets%E4%B8%8Eputs%EF%BC%89\"><span class=\"toc-text\">字符串输入输出函数 （gets与puts）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#define\"><span class=\"toc-text\">define</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">用法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%98%93%E9%94%99%E7%82%B9\"><span class=\"toc-text\">易错点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8Econst%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">与const的区别</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">定义函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">无参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%89%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">有返回值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">无返回值函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%8F%82%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">有参函数的定义</span></a></li></ol></li></ol>","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"快乐周五","uid":"ea7bb1240e1dab8cf5209f8a8c9f1924","slug":"tuoli","date":"2020-12-19T02:48:28.000Z","updated":"2021-05-06T06:05:13.552Z","comments":true,"path":"api/articles/tuoli.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/yRZAoQv5uFUKMrH.jpg","text":" 这是这几个月最值得纪念的周五，体验了脱离学校的快乐 2020.12.13 晚上和社团其它人一起谋划着“出校大计”，原本定在周六，但是由于学校要体测（挺佩服学校挑时间的能力🤬），不得不将时间改成周五，让快乐减少了一半😔 2020.12.15 果然到了周末就会发现屁事很多😔，一个个...","link":"","photos":[],"count_time":{"symbolsCount":557,"symbolsTime":"1 mins."},"categories":[{"name":"生活","slug":"生活","count":1,"path":"api/categories/生活.json"}],"tags":[{"name":"娱乐","slug":"娱乐","count":1,"path":"api/tags/娱乐.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"Assembly Language","uid":"663c77d5ec7d7de4374e915594360d5a","slug":"Assembly Language","date":"2020-12-08T12:45:27.000Z","updated":"2021-05-06T05:48:50.266Z","comments":true,"path":"api/articles/Assembly Language.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/zxfJcpSeT5kHrtB.jpg","text":"学习目的通过用汇编语言进行编程而深入地理解计算机底层的基本工作机理，达到随心所欲地控制计算机的目的 汇编语言的由来对于人类来说，二进制程序是不可读的，根本看不出来机器干了什么。为了解决可读性的问题，以及偶尔的编辑需求，就诞生了汇编语言。 汇编语言的特点 机器相关性： 一种面向机器...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"基础知识","slug":"基础知识","count":4,"path":"api/categories/基础知识.json"}],"tags":[{"name":"Assembly Language","slug":"Assembly-Language","count":2,"path":"api/tags/Assembly-Language.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}