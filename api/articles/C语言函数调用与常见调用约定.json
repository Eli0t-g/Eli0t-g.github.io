{"title":"C语言函数调用与常见调用约定","uid":"20bf7105b3d9595b11047eca410abfeb","slug":"C语言函数调用与常见调用约定","date":"2021-04-25T14:02:30.000Z","updated":"2021-05-06T05:50:35.723Z","comments":true,"path":"api/articles/C语言函数调用与常见调用约定.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/Z3CboONMf2WxlR6.jpg","content":"<h1 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h1><p>下面代码展示了一个简单的加法子函数调用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">plus</span> <span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c;</span><br><span class=\"line\">    c=plus(a,b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进入反汇编查看</p>\n<p><img src=\"https://i.loli.net/2021/05/05/WinHfG98h6gNzVs.png\" alt=\"image-20210425221051251.png\"></p>\n<p>首先，系统会将1，2分别移动到a，b对应的地址中，之后从右至左将b，a对应地址的值移动到eax，ecx中，之后进行跳转到plus函数的plt表</p>\n<p><img src=\"https://i.loli.net/2021/05/05/fkHsWxKLNU9uXBb.png\" alt=\"image-20210425221706739.png\"></p>\n<p>再跳转到plus函数的实际中</p>\n<p><img src=\"https://i.loli.net/2021/05/05/K1Qb8IYfksJ6lUd.png\" alt=\"image-20210425221830540.png\"></p>\n<p>子函数先是把ebp保存在栈中，之后通过mov指令将ebp指向esp指向的位置，esp再进行抬栈处理，然后保存现场（将ebx，esi，edi存储的值保存在堆栈中）,接下来把ebp-0ch对应的地址移动到edi中。之后向ecx赋30h，向eax赋0CCCCCCCCh，然后对es:edi对应的地址开始循环赋值（整个过程就是对缓冲区初始化）。（后面两个不知道是什么，太菜了😅）</p>\n<p><img src=\"https://i.loli.net/2021/05/05/A2XJYcVMrRgTzaP.png\" alt=\"image-20210426075548516.png\"></p>\n<p>接下来就是将a的值移动到eax中再加b的值，后面再恢复现场，再内平栈（add esp 0C0h）,之后比较esp，ebp是否相同，（如果相同我也不知道会怎么样，😅），然后将esp指向ebp指向的位置，将ebp返回到原来的地方。</p>\n<p><img src=\"https://i.loli.net/2021/05/05/Cc6jF9qiHUAKoG7.png\" alt=\"image-20210425222327010.png\"></p>\n<p>最后外平栈（add esp,8），将计算结果从eax移到变量c对应的地址中，至此完成函数调用</p>\n<p><img src=\"https://i.loli.net/2021/05/05/CAj5SFWvYikT38l.png\" alt=\"image-20210426075951991.png\"></p>\n<h1 id=\"常见的三种调用约定（32位）\"><a href=\"#常见的三种调用约定（32位）\" class=\"headerlink\" title=\"常见的三种调用约定（32位）\"></a>常见的三种调用约定（32位）</h1><p><img src=\"https://i.loli.net/2021/05/05/vaOVrxQuMnZfL4F.png\" alt=\"image-20210426080234751.png\"></p>\n<p>第一种就是系统默认的调用约定，调用者清理栈，就是和上面外平栈（add esp,8）差不多</p>\n<p>第二种就是在返回时对ret进行处理，使栈指针指向调用参数前的地址（如：ret 8）</p>\n<p>第三种就是通过寄存器传参，但如果寄存器不够还是得借助栈来传参，因为cpu与寄存器之间传递相对于cpu与内存更快，所以第三种方法在参数较少时，更加高效。</p>\n","feature":true,"text":"函数调用下面代码展示了一个简单的加法子函数调用 12345678910#include&lt;stdio.h&gt;int plus (int a,int b)&#123; return a+b;&#125;void main()&#123; int a=1,b=2,c; c=p...","link":"","photos":[],"count_time":{"symbolsCount":794,"symbolsTime":"1 mins."},"categories":[{"name":"C语言","slug":"C语言","count":4,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":4,"path":"api/tags/收获.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">函数调用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A%EF%BC%8832%E4%BD%8D%EF%BC%89\"><span class=\"toc-text\">常见的三种调用约定（32位）</span></a></li></ol>","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"程序员的自我修养","uid":"af7567a01704ef88a3107a466485b1d6","slug":"程序员的自我修养","date":"2021-05-02T07:24:45.000Z","updated":"2021-05-07T03:57:29.556Z","comments":true,"path":"api/articles/程序员的自我修养.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/QkoWgnj7FDpwYX9.jpg","text":"分段基本思路使把一段与程序所需的内存空间大小的虚拟空间映射到某个地址空间。采用分段的方法可以解决以下几个问题 地址空间不隔离。如果不同程序间地址连续很容易被恶意程序通过溢出手段使其它程序崩溃或者产生严重后果，而分段可以避免这种情况，比如此时有A,B两个程序，此时操作系统会分配两个...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"读书笔记","slug":"读书笔记","count":1,"path":"api/categories/读书笔记.json"}],"tags":[{"name":"程序员的自我修养","slug":"程序员的自我修养","count":1,"path":"api/tags/程序员的自我修养.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"switch语句高效的原因","uid":"6ab7ba8971edf760af996dc2bda9f711","slug":"switch语句高效的原因","date":"2021-04-25T04:48:37.000Z","updated":"2021-05-06T06:04:24.754Z","comments":true,"path":"api/articles/switch语句高效的原因.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/vQXusgKILDZn5OT.jpg","text":"switch语句和if语句都是条件判断语句，但是switch语句更加高效，因而许多公司在设计时大多采用switch语句 当分支语句较少时，switch与if语句并没有什么区别都是先判断，之后再跳转 当分支较多时，switch语句就发生变化，并没有挨个判断再跳转，只跳转了一次 sw...","link":"","photos":[],"count_time":{"symbolsCount":741,"symbolsTime":"1 mins."},"categories":[{"name":"C语言","slug":"C语言","count":4,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":4,"path":"api/tags/收获.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}