{"title":"Linux常见的保护机制","uid":"49b5f2dc0a9e31a5cb54c844157811ae","slug":"linux程序的常⽤保护机制","date":"2021-04-09T13:14:59.000Z","updated":"2021-05-15T06:16:20.410Z","comments":true,"path":"api/articles/linux程序的常⽤保护机制.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/H1hc6iNuVekgGtz.jpg","content":"<h1 id=\"checksec（gdb安装好就有）\"><a href=\"#checksec（gdb安装好就有）\" class=\"headerlink\" title=\"checksec（gdb安装好就有）\"></a>checksec（gdb安装好就有）</h1><h2 id=\"gdb\"><a href=\"#gdb\" class=\"headerlink\" title=\"gdb\"></a>gdb</h2><p>动态调试软件，必备。</p>\n<p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install gdb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>作用：它是用来检查可执行文件属性，例如PIE, RELRO, PaX, Canaries, ASLR, Fortify Source等等属性。</p>\n<p>用法：checksec filename</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb-peda$ checksec start</span><br><span class=\"line\">CANARY    : disabled(这个选项表示栈保护功能有没有开启。)</span><br><span class=\"line\">FORTIFY   : disabled</span><br><span class=\"line\">NX        : ENABLED</span><br><span class=\"line\">PIE       : disabled</span><br><span class=\"line\">RELRO     : disabled</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CANNARY-栈保护\"><a href=\"#CANNARY-栈保护\" class=\"headerlink\" title=\"CANNARY(栈保护)\"></a>CANNARY(栈保护)</h1><p>栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让shellcode能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈中高危区插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。**</p>\n<p>gcc在4.2版本中添加了-fstack-protector和-fstack-protector-all编译参数以支持栈保护功能，4.9新增了-fstack-protector-strong编译参数让保护的范围更广。</p>\n<p>因此在编译时可以控制是否开启栈保护以及程度，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -fno-stack-protector -o test test.c  &#x2F;&#x2F;禁用栈保护</span><br><span class=\"line\">gcc -fstack-protector -o test test.c   &#x2F;&#x2F;启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class=\"line\">gcc -fstack-protector-all -o test test.c &#x2F;&#x2F;启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"FORTIFY-轻微的检查\"><a href=\"#FORTIFY-轻微的检查\" class=\"headerlink\" title=\"FORTIFY(轻微的检查)\"></a>FORTIFY(轻微的检查)</h1><p>fority其实是非常轻微的检查，用于检查是否存在缓冲区溢出的错误。适用情形是程序采用大量的字符串或者内存操作函数，如memepy,stpcpy, strcpy, strncpy, strcat, strncat, sprintf, snprintf， vsprintf，vsnprintf, gets以及宽字符的变体。FORTIFY_ SOURCE设为1,并且将编译器设置为优化1(gcc -01)，以及出现上述情形，那么程序编译时就会进行检查但又不会改变程序功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o test test.c &#x2F;&#x2F; 默认情况下，不会开这个检查 </span><br><span class=\"line\">gcc -D_FORTIFY_SOURCE&#x3D;1 -o test test.c &#x2F;&#x2F; 较弱的检查 </span><br><span class=\"line\">gcc -D_FORTIFY_SOURCE&#x3D;1 仅仅只会在编译时进⾏检查 (特别像某些头⽂件 #include &lt;str _FORTIFY_SOURCE设为1，并且将编译器设置为优化1(gcc -O1)，以及出现上述情形，那么程序编 </span><br><span class=\"line\">gcc -D_FORTIFY_SOURCE&#x3D;2 -o test test.c &#x2F;&#x2F; 较强的检查 gcc -D_FORTIFY_SOURCE&#x3D;2 程序执⾏时也会有检查 (如果检查到缓冲区溢出，就终⽌程序) _FORTIFY_SOURCE设为2，有些检查功能会加⼊，但是这可能导致程序崩溃。</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"NX（DEP）\"><a href=\"#NX（DEP）\" class=\"headerlink\" title=\"NX（DEP）\"></a>NX（DEP）</h1><p>N X （ D E P）的基本原理是将数据所在内存⻚标识为不可执⾏,当程序溢出成功转⼊shellcode时，程序会尝试在数据⻚⾯上执⾏指令，此时CPU就会抛出异常 ,⽽不是去执⾏恶意指令 。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o test test.c &#x2F;&#x2F; 默认情况下，开启NX保护</span><br><span class=\"line\">gcc -z execstack -o test test.c &#x2F;&#x2F; 禁⽤NX保护 </span><br><span class=\"line\">gcc -z noexecstack -o test test.c &#x2F;&#x2F; 开启NX保护</span><br></pre></td></tr></table></figure>\n\n<p>在Windows下，类似的概念为DEP（数据执行保护）,数据执⾏保护( D E P ) （ Data Execution Prevention ） 是⼀套软硬件技术，能 够 在 内 存上执⾏额外检查以帮助防⽌在系统上运⾏恶意代码 ,在最新版的Visual Studio中默认开启了DEP编译选项。</p>\n<h1 id=\"PIE（ASLR）\"><a href=\"#PIE（ASLR）\" class=\"headerlink\" title=\"PIE（ASLR）\"></a>PIE（ASLR）</h1><p>可以防范基于Ret2libc方式的针对DEP的攻击。ASLR和DEP配合使用，能有效阻止攻击者在堆栈上运行恶意代码。PIE和ASLR不是一样的作用，ASLR只能对堆、栈,ibc和mmap随机化，而不能对代码段，数据段随机化，使用PIE+ASLR则可以对代码段和数据段随机化。区别是ASLR是系统功能选项，PIE和PIC是编译器功能选项。联系点在于在开启ASLR之后，PIE才会生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o test test.c &#x2F;&#x2F; 默认情况下，不开启PIE </span><br><span class=\"line\">gcc -fpie -pie -o test test.c &#x2F;&#x2F; 开启PIE，此时强度为1 </span><br><span class=\"line\">gcc -fPIE -pie -o test test.c &#x2F;&#x2F; 开启PIE，此时为最⾼强度2 </span><br><span class=\"line\">gcc -fpic -o test test.c &#x2F;&#x2F; 开启PIC，此时强度为1，不会开启PIE</span><br><span class=\"line\">gcc -fPIC -o test test.c &#x2F;&#x2F; 开启PIC，此时为最⾼强度2，不会开启PIE</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"ASLR-Address-Space-Layout-Randomization\"><a href=\"#ASLR-Address-Space-Layout-Randomization\" class=\"headerlink\" title=\"ASLR (Address Space Layout Randomization)\"></a>ASLR (Address Space Layout Randomization)</h1><p>ASLR是⼀种针对缓冲区溢出的安全保护技术,通过对堆栈 、共享库映射等线性区布局的随机化，通过增加攻击者预测⽬的地址的难度,防⽌攻击者直接定位攻击代码位置,达到阻⽌溢出攻击的⽬的。 </p>\n<p>参考文章：<a href=\"https://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/\">https://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</a></p>\n","text":"checksec（gdb安装好就有）gdb动态调试软件，必备。 安装： 1apt-get install gdb 用法作用：它是用来检查可执行文件属性，例如PIE, RELRO, PaX, Canaries, ASLR, Fortify Source等等属性。 用法：checks...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"PWN","slug":"PWN","count":1,"path":"api/categories/PWN.json"}],"tags":[{"name":"基础知识","slug":"基础知识","count":1,"path":"api/tags/基础知识.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#checksec%EF%BC%88gdb%E5%AE%89%E8%A3%85%E5%A5%BD%E5%B0%B1%E6%9C%89%EF%BC%89\"><span class=\"toc-text\">checksec（gdb安装好就有）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gdb\"><span class=\"toc-text\">gdb</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">用法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CANNARY-%E6%A0%88%E4%BF%9D%E6%8A%A4\"><span class=\"toc-text\">CANNARY(栈保护)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#FORTIFY-%E8%BD%BB%E5%BE%AE%E7%9A%84%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">FORTIFY(轻微的检查)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#NX%EF%BC%88DEP%EF%BC%89\"><span class=\"toc-text\">NX（DEP）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PIE%EF%BC%88ASLR%EF%BC%89\"><span class=\"toc-text\">PIE（ASLR）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ASLR-Address-Space-Layout-Randomization\"><span class=\"toc-text\">ASLR (Address Space Layout Randomization)</span></a></li></ol>","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"解决hexo博客图片无法加载问题","uid":"8c5e835735464cb680ea7b5b166e5319","slug":"解决hexo博客图片无法加载问题","date":"2021-04-20T08:51:23.000Z","updated":"2021-05-06T05:48:25.502Z","comments":true,"path":"api/articles/解决hexo博客图片无法加载问题.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/blPaQH7fxYhopEy.jpg","text":"起初搭建好博客时，发现照片无法上传本地照片， 根据网上的方法整了半天也没整好，最后还是室友告诉我通过下面的方法才可以引用本地照片 1&lt;img src&#x3D;&quot;path&quot; height&#x3D;&quot;xxx&quot; width&#x3D;&...","link":"","photos":[],"count_time":{"symbolsCount":554,"symbolsTime":"1 mins."},"categories":[{"name":"问题","slug":"问题","count":2,"path":"api/categories/问题.json"}],"tags":[{"name":"博客","slug":"博客","count":2,"path":"api/tags/博客.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"指针","uid":"4c0cb40856baa1e8384c37c457fb63f6","slug":"指针","date":"2021-03-28T02:54:43.000Z","updated":"2021-05-06T05:14:32.313Z","comments":true,"path":"api/articles/指针.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/wsVhg4mf8uJx3Q1.jpg","text":" 指针，并不像一些书上写的只是用于存储地址，它是一种类型数据，存储什么都可以，并不是只能存储地址。 指针大小常见的指针有：char *，int *，float * …，但char * * *，int * * *…同样也是指针(多级指针)，同时虽然指针类型有很多种，但是无论是什么指...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"C语言","slug":"C语言","count":4,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":4,"path":"api/tags/收获.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}