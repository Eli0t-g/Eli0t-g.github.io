{"title":"Linux下四种保护机制","uid":"7a5daddedfee1de88701f3a5ab622f7d","slug":"linux程序的常⽤保护机制","date":"2021-04-09T13:14:59.000Z","updated":"2021-12-01T11:46:13.648Z","comments":true,"path":"api/articles/linux程序的常⽤保护机制.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/H1hc6iNuVekgGtz.jpg","content":"<h1 id=\"checksec（gdb安装好就有）\"><a href=\"#checksec（gdb安装好就有）\" class=\"headerlink\" title=\"checksec（gdb安装好就有）\"></a>checksec（gdb安装好就有）</h1><h2 id=\"gdb\"><a href=\"#gdb\" class=\"headerlink\" title=\"gdb\"></a>gdb</h2><p>动态调试软件，必备。</p>\n<p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install gdb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>作用：它是用来检查可执行文件属性，例如PIE, RELRO, PaX, Canaries, ASLR, Fortify Source等等属性。</p>\n<p>用法：checksec filename</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb-peda$ checksec start</span><br><span class=\"line\">CANARY    : disabled(这个选项表示栈保护功能有没有开启。)</span><br><span class=\"line\">FORTIFY   : disabled</span><br><span class=\"line\">NX        : ENABLED</span><br><span class=\"line\">PIE       : disabled</span><br><span class=\"line\">RELRO     : disabled</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"CANNARY-栈保护\"><a href=\"#CANNARY-栈保护\" class=\"headerlink\" title=\"CANNARY(栈保护)\"></a>CANNARY(栈保护)</h1><p>栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让shellcode能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈中高危区插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。**</p>\n<p>gcc在4.2版本中添加了-fstack-protector和-fstack-protector-all编译参数以支持栈保护功能，4.9新增了-fstack-protector-strong编译参数让保护的范围更广。</p>\n<p>因此在编译时可以控制是否开启栈保护以及程度，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -fno-stack-protector -o test test.c  &#x2F;&#x2F;禁用栈保护</span><br><span class=\"line\">gcc -fstack-protector -o test test.c   &#x2F;&#x2F;启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class=\"line\">gcc -fstack-protector-all -o test test.c &#x2F;&#x2F;启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"绕过方法\"><a href=\"#绕过方法\" class=\"headerlink\" title=\"绕过方法\"></a>绕过方法</h2><p>针对不同情况，总结了六种绕过方法，有兴趣可以参考我的另一篇博客<a href=\"https://eli0t-g.github.io/post/%E7%BB%95%E8%BF%87canary%E7%9A%84%E6%96%B9%E6%B3%95\">绕过canary的六种方法</a></p>\n<h1 id=\"NX（DEP）\"><a href=\"#NX（DEP）\" class=\"headerlink\" title=\"NX（DEP）\"></a>NX（DEP）</h1><p>NX（ DEP）的基本原理是将数据所在内存⻚标识为不可执⾏,当程序溢出成功转⼊shellcode时，程序会尝试在数据⻚⾯上执⾏指令，此时CPU就会抛出异常 ,⽽不是去执⾏恶意指令 。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o test test.c &#x2F;&#x2F; 默认情况下，开启NX保护</span><br><span class=\"line\">gcc -z execstack -o test test.c &#x2F;&#x2F; 禁⽤NX保护 </span><br><span class=\"line\">gcc -z noexecstack -o test test.c &#x2F;&#x2F; 开启NX保护</span><br></pre></td></tr></table></figure>\n\n<p>在Windows下，类似的概念为DEP（数据执行保护）,数据执⾏保护( D E P ) （ Data Execution Prevention ） 是⼀套软硬件技术，能 够 在 内 存上执⾏额外检查以帮助防⽌在系统上运⾏恶意代码 ,在最新版的Visual Studio中默认开启了DEP编译选项。</p>\n<h2 id=\"绕过方法-1\"><a href=\"#绕过方法-1\" class=\"headerlink\" title=\"绕过方法\"></a>绕过方法</h2><p>目前遇见过的方法有</p>\n<ol>\n<li>利用mmap申请一块有rwx权限的内存，往里面写shellcode，最终返回到shellcode上</li>\n<li>利用mprotect函数修改bss段权限为rwx，把shellcode写到bss段上再返回到shellocde上</li>\n</ol>\n<h1 id=\"PIE（ASLR）\"><a href=\"#PIE（ASLR）\" class=\"headerlink\" title=\"PIE（ASLR）\"></a>PIE（ASLR）</h1><p>可以防范基于Ret2libc方式的针对DEP的攻击。ASLR和DEP配合使用，能有效阻止攻击者在堆栈上运行恶意代码。PIE和ASLR不是一样的作用，ASLR只能对堆、栈,ibc和mmap随机化，而不能对代码段，数据段随机化，使用PIE+ASLR则可以对代码段和数据段随机化。区别是ASLR是系统功能选项，PIE和PIC是编译器功能选项。联系点在于在开启ASLR之后，PIE才会生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o test test.c &#x2F;&#x2F; 默认情况下，不开启PIE </span><br><span class=\"line\">gcc -fpie -pie -o test test.c &#x2F;&#x2F; 开启PIE，此时强度为1 </span><br><span class=\"line\">gcc -fPIE -pie -o test test.c &#x2F;&#x2F; 开启PIE，此时为最⾼强度2 </span><br><span class=\"line\">gcc -fpic -o test test.c &#x2F;&#x2F; 开启PIC，此时强度为1，不会开启PIE</span><br><span class=\"line\">gcc -fPIC -o test test.c &#x2F;&#x2F; 开启PIC，此时为最⾼强度2，不会开启PIE</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"ASLR-Address-Space-Layout-Randomization\"><a href=\"#ASLR-Address-Space-Layout-Randomization\" class=\"headerlink\" title=\"ASLR (Address Space Layout Randomization)\"></a>ASLR (Address Space Layout Randomization)</h1><p>ASLR是⼀种针对缓冲区溢出的安全保护技术,通过对堆栈 、共享库映射等线性区布局的随机化，通过增加攻击者预测⽬的地址的难度,防⽌攻击者直接定位攻击代码位置,达到阻⽌溢出攻击的⽬的。 </p>\n<h2 id=\"绕过方法-2\"><a href=\"#绕过方法-2\" class=\"headerlink\" title=\"绕过方法\"></a>绕过方法</h2><p>可以利用printf函数泄露地址从而获得真正地址</p>\n<p>参考文章：<a href=\"https://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/\">https://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</a></p>\n","text":"checksec（gdb安装好就有）gdb动态调试软件，必备。 安装： 1apt-get install gdb 用法作用：它是用来检查可执行文件属性，例如PIE, RELRO, PaX, Canaries, ASLR, Fortify Source等等属性。 用法：checks...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"PWN","slug":"PWN","count":2,"path":"api/categories/PWN.json"}],"tags":[{"name":"基础知识","slug":"基础知识","count":1,"path":"api/tags/基础知识.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#checksec%EF%BC%88gdb%E5%AE%89%E8%A3%85%E5%A5%BD%E5%B0%B1%E6%9C%89%EF%BC%89\"><span class=\"toc-text\">checksec（gdb安装好就有）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gdb\"><span class=\"toc-text\">gdb</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">用法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CANNARY-%E6%A0%88%E4%BF%9D%E6%8A%A4\"><span class=\"toc-text\">CANNARY(栈保护)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">绕过方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#NX%EF%BC%88DEP%EF%BC%89\"><span class=\"toc-text\">NX（DEP）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95-1\"><span class=\"toc-text\">绕过方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PIE%EF%BC%88ASLR%EF%BC%89\"><span class=\"toc-text\">PIE（ASLR）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ASLR-Address-Space-Layout-Randomization\"><span class=\"toc-text\">ASLR (Address Space Layout Randomization)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95-2\"><span class=\"toc-text\">绕过方法</span></a></li></ol></li></ol>","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C语言函数调用与常见调用约定","uid":"20bf7105b3d9595b11047eca410abfeb","slug":"C语言函数调用与常见调用约定","date":"2021-04-25T14:02:30.000Z","updated":"2021-05-09T03:22:20.395Z","comments":true,"path":"api/articles/C语言函数调用与常见调用约定.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/Z3CboONMf2WxlR6.jpg","text":"函数调用下面代码展示了一个简单的加法子函数调用 12345678910#include&lt;stdio.h&gt;int plus (int a,int b)&#123; return a+b;&#125;void main()&#123; int a=1,b=2,c; c=p...","link":"","photos":[],"count_time":{"symbolsCount":864,"symbolsTime":"1 mins."},"categories":[{"name":"C语言","slug":"C语言","count":1,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":1,"path":"api/tags/收获.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"快乐周五","uid":"ea7bb1240e1dab8cf5209f8a8c9f1924","slug":"tuoli","date":"2020-12-19T02:48:28.000Z","updated":"2021-05-06T06:05:13.552Z","comments":true,"path":"api/articles/tuoli.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/yRZAoQv5uFUKMrH.jpg","text":" 这是这几个月最值得纪念的周五，体验了脱离学校的快乐 2020.12.13 晚上和社团其它人一起谋划着“出校大计”，原本定在周六，但是由于学校要体测（挺佩服学校挑时间的能力🤬），不得不将时间改成周五，让快乐减少了一半😔 2020.12.15 果然到了周末就会发现屁事很多😔，一个个...","link":"","photos":[],"count_time":{"symbolsCount":557,"symbolsTime":"1 mins."},"categories":[{"name":"生活","slug":"生活","count":1,"path":"api/categories/生活.json"}],"tags":[{"name":"娱乐","slug":"娱乐","count":1,"path":"api/tags/娱乐.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}