{"title":"switch语句高效的原因","uid":"6ab7ba8971edf760af996dc2bda9f711","slug":"switch语句高效的原因","date":"2021-04-25T04:48:37.000Z","updated":"2021-05-06T06:04:24.754Z","comments":true,"path":"api/articles/switch语句高效的原因.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/vQXusgKILDZn5OT.jpg","content":"<p>switch语句和if语句都是条件判断语句，但是switch语句更加高效，因而许多公司在设计时大多采用switch语句</p>\n<ul>\n<li><p>当分支语句较少时，switch与if语句并没有什么区别都是先判断，之后再跳转</p>\n<p><img src=\"https://i.loli.net/2021/05/05/JbqGPogxXlWz5Cy.png\" alt=\"image-20210424220833029_1_.png\"></p>\n<p><img src=\"https://i.loli.net/2021/05/05/4PwV6MvuABhcRUG.png\" alt=\"image-20210424221716230.png\"></p>\n</li>\n<li><p>当分支较多时，switch语句就发生变化，并没有挨个判断再跳转，只跳转了一次</p>\n<p><img src=\"https://i.loli.net/2021/05/05/ernR2PoyQKiG5Xp.png\" alt=\"image-20210424220610926.png\"></p>\n<p><img src=\"https://i.loli.net/2021/05/05/75EbrqeRQwoDhI3.png\" alt=\"image-20210425073459041.png\"></p>\n</li>\n</ul>\n<p>switch语句会维护一张跳转表，不管case判断语句的值是不是按照顺序的，内存中的地址表都会按照顺序进行排列。分析汇编代码会发现，编译器先是将x的值赋给ecx寄存器，之后ecx减去case中最小值并与case中最大值比较，大于就会跳转到default，不大于就会将ecx寄存器中的值移到edx中,之后跳转到edx * 4+14191Ch对应的地址，查看地址发现ABCD四个字符存放的位置就是相差4个字节。所以，当分支较多时，switch-case不用像if-else if那样遍历条件分支直到命中条件，而只需访问对应索引号的表项从而到达定位到分支。<strong>从数据结构与算法的角度来看，switch 语句相当于一个数组，其查询时间复杂度为 O(1)；而 if-lese 语句相当于一个链表，其时间复杂度为 O(n)</strong></p>\n<p><img src=\"https://i.loli.net/2021/05/05/IskPjxBeu4i2RcF.png\" alt=\"image-20210425073053511.png\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>使用switch语句时，程序首先判断switch变量是否大于（小于）最大（最小）case 常量，若大于（小于），则跳到default分支处理；否则取得索引号为switch变量大小的跳表项的地址（即跳表的起始地址＋表项大小＊索引号），程序接着跳到此地址执行，到此完成了分支的跳转。。即使case情况不连续或者case情况相差较大时，也能达到相应的效果。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191208162619834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pidzExODU=,size_16,color_FFFFFF,t_70\"></p>\n<p>参考文章：<a href=\"https://blog.csdn.net/zbw1185/article/details/103359426\">https://blog.csdn.net/zbw1185/article/details/103359426</a></p>\n","text":"switch语句和if语句都是条件判断语句，但是switch语句更加高效，因而许多公司在设计时大多采用switch语句 当分支语句较少时，switch与if语句并没有什么区别都是先判断，之后再跳转 当分支较多时，switch语句就发生变化，并没有挨个判断再跳转，只跳转了一次 sw...","link":"","photos":[],"count_time":{"symbolsCount":741,"symbolsTime":"1 mins."},"categories":[{"name":"C语言","slug":"C语言","count":4,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":4,"path":"api/tags/收获.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C语言函数调用与常见调用约定","uid":"20bf7105b3d9595b11047eca410abfeb","slug":"C语言函数调用与常见调用约定","date":"2021-04-25T14:02:30.000Z","updated":"2021-05-09T03:22:20.395Z","comments":true,"path":"api/articles/C语言函数调用与常见调用约定.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/Z3CboONMf2WxlR6.jpg","text":"函数调用下面代码展示了一个简单的加法子函数调用 12345678910#include&lt;stdio.h&gt;int plus (int a,int b)&#123; return a+b;&#125;void main()&#123; int a=1,b=2,c; c=p...","link":"","photos":[],"count_time":{"symbolsCount":864,"symbolsTime":"1 mins."},"categories":[{"name":"C语言","slug":"C语言","count":4,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":4,"path":"api/tags/收获.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"指针链表","uid":"6d56270760ef1ea61e45a3957c135c25","slug":"指针链表","date":"2021-04-21T03:22:39.000Z","updated":"2021-05-06T05:15:29.906Z","comments":true,"path":"api/articles/指针链表.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/5C2jZ6KtVETeuhs.jpg","text":"问题情景：将一个数插入一段有序数列的链表之中 解决这个问题的方法很多，比如可以使用桶排序，冒泡排序……但这次采用指针和动态空间去解决 首先将有序数列（例如：2,3,5,8,9,10,18,26,32）放在一个链表中 链表是由多个结点组成，每个结点由两部分组成：data和* nex...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"C语言","slug":"C语言","count":4,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":4,"path":"api/tags/收获.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}