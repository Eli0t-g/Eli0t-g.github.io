{"title":"从源文件到可执行文件","uid":"33eb1f0294c927088b5a7d2617a42d07","slug":"从源文件到可执行文件","date":"2021-04-21T03:22:39.000Z","updated":"2021-05-14T00:34:26.728Z","comments":true,"path":"api/articles/从源文件到可执行文件.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/5C2jZ6KtVETeuhs.jpg","content":"<h1 id=\"从源文件到可执行文件\"><a href=\"#从源文件到可执行文件\" class=\"headerlink\" title=\"从源文件到可执行文件\"></a>从源文件到可执行文件</h1><p>C源文件到可执行文件共经历了4个过程，包括<strong>预处理、编译、汇编、链接</strong>。这里在Linux环境下展示此过程，源代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> hello <span class=\"meta-string\">&quot;Hello World&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(hello);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h1><p>在这个阶段，编译器会做以下事情：</p>\n<ul>\n<li>将所有的#define删除，并将宏定义展开。</li>\n<li>处理一些条件预编译指令如#ifndef,#ifdef,#elif,#else,#endif等。将不必要的代码过滤掉。</li>\n<li>处理#include预编译指令，将被包含的文件插入到该预编译指令的位置。这个过程是递归进行的，因为被包含的文件可能也包含其他文件。</li>\n<li>预处理过程还会过滤掉所有注释/**/和//里面的内容。</li>\n<li>另外还会添加行号和文件名标识。</li>\n<li>最后会保留#pragma编译器指令，因为编译器需要使用它们。</li>\n</ul>\n<p>补充：#include&lt;&gt; ，<strong>从标准库中寻找头文件，</strong>#include””，<strong>从当前目录开始寻找头文件。</strong><br>查看预处理后的文件<br><img src=\"https://i.loli.net/2021/05/14/p4kwEuFWPHXhiqm.png\" alt=\"image.png\"><br>在.i文件中#include&lt;stdio.h&gt;展开，输出里面的宏定义hello也被替换成Hello World<img src=\"https://i.loli.net/2021/05/14/EQFnMI2eHVqJ4Ni.png\" alt=\"image.png\"></p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><p>编译阶段，C语言每条语句都以一种标准的文件格式确切地描述了一条低级机器语言指令<br>生成编译后的文件</p>\n<p><img src=\"https://i.loli.net/2021/05/14/P4VehmoKyF1Sp2k.png\" alt=\"image.png\"></p>\n<p>可以看到C语言文件被翻译成汇编代码，每条语句都以一种标准的文件格式确切地描述了一条低级机器语言指令<img src=\"https://i.loli.net/2021/05/14/bwRGcPMFemIo35T.png\" alt=\"image.png\"></p>\n<h1 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h1><p>汇编阶段，编译器将hello.s翻译成机器语言指令, 把这些指令打包成一种可重定位目标程序的格式, 并把结果保存在hello.o中, hello.o是一个二进制文件, 它的字节编码是机器语言指令, 而不是字符<br>通过以下指令查看汇编后的文件<br><img src=\"https://i.loli.net/2021/05/14/MSoJZqPhRXCVfc7.png\" alt=\"image.png\"></p>\n<h1 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h1><p>在这个阶段，编译器会将含有调用函数的目标文件以某种方式合并起来生成可以执行文件（比如printf函数的目标文件就在printf.o），命令：gcc hello.o -o hello</p>\n","text":"从源文件到可执行文件C源文件到可执行文件共经历了4个过程，包括预处理、编译、汇编、链接。这里在Linux环境下展示此过程，源代码如下： 1234567#include&lt;stdio.h&gt;#define hello &quot;Hello World&quot;int m...","link":"","photos":[],"count_time":{"symbolsCount":874,"symbolsTime":"1 mins."},"categories":[{"name":"C语言","slug":"C语言","count":3,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":3,"path":"api/tags/收获.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E6%BA%90%E6%96%87%E4%BB%B6%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">从源文件到可执行文件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A2%84%E5%A4%84%E7%90%86\"><span class=\"toc-text\">预处理</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">编译</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96\"><span class=\"toc-text\">汇编</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">链接</span></a></li></ol>","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"switch语句高效的原因","uid":"6ab7ba8971edf760af996dc2bda9f711","slug":"switch语句高效的原因","date":"2021-04-25T04:48:37.000Z","updated":"2021-05-06T06:04:24.754Z","comments":true,"path":"api/articles/switch语句高效的原因.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/vQXusgKILDZn5OT.jpg","text":"switch语句和if语句都是条件判断语句，但是switch语句更加高效，因而许多公司在设计时大多采用switch语句 当分支语句较少时，switch与if语句并没有什么区别都是先判断，之后再跳转 当分支较多时，switch语句就发生变化，并没有挨个判断再跳转，只跳转了一次 sw...","link":"","photos":[],"count_time":{"symbolsCount":741,"symbolsTime":"1 mins."},"categories":[{"name":"C语言","slug":"C语言","count":3,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":3,"path":"api/tags/收获.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"解决hexo博客图片无法加载问题","uid":"8c5e835735464cb680ea7b5b166e5319","slug":"解决hexo博客图片无法加载问题","date":"2021-04-20T08:51:23.000Z","updated":"2021-05-06T05:48:25.502Z","comments":true,"path":"api/articles/解决hexo博客图片无法加载问题.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/blPaQH7fxYhopEy.jpg","text":"起初搭建好博客时，发现照片无法上传本地照片， 根据网上的方法整了半天也没整好，最后还是室友告诉我通过下面的方法才可以引用本地照片 1&lt;img src&#x3D;&quot;path&quot; height&#x3D;&quot;xxx&quot; width&#x3D;&...","link":"","photos":[],"count_time":{"symbolsCount":554,"symbolsTime":"1 mins."},"categories":[{"name":"问题","slug":"问题","count":2,"path":"api/categories/问题.json"}],"tags":[{"name":"博客","slug":"博客","count":2,"path":"api/tags/博客.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}