{"title":"指针链表","uid":"6d56270760ef1ea61e45a3957c135c25","slug":"指针链表","date":"2021-04-21T03:22:39.000Z","updated":"2021-05-06T05:15:29.906Z","comments":true,"path":"api/articles/指针链表.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/5C2jZ6KtVETeuhs.jpg","content":"<p>问题情景：将一个数插入一段有序数列的链表之中</p>\n<p>解决这个问题的方法很多，比如可以使用桶排序，冒泡排序……但这次采用指针和动态空间去解决</p>\n<p>首先将有序数列（例如：2,3,5,8,9,10,18,26,32）放在一个链表中</p>\n<p><img src=\"https://i.loli.net/2021/05/05/x32v4ZJVnmFwGra.png\" alt=\"image-20210421113305778.png\"></p>\n<p>链表是由多个结点组成，每个结点由两部分组成：data和* next，其中data用于存放数据，因为是动态空间，所以使用相邻两个数的地址并不是连续的，要采用* next记录下一个结点地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> data;    <span class=\"comment\">//存储数值</span></span><br><span class=\"line\">         <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span>   <span class=\"comment\">//存储下一个链表的地址</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>下一步就是考虑如何插入进去一个数，首先将要插入的数放进申请的结点中，之后判断插在哪里（判断条件：后面的数是否大于等于要插入的数），然后将要插入的数的* next指向下一个大于它的数的结点地址，将上一个结点的* next指向插入结点的地址</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">p</span>    </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    p=(struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node))     <span class=\"comment\">//申请一个空间，用于存放结点并让p指</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t-&gt;next == <span class=\"literal\">NULL</span> || t-&gt;next-&gt;data &gt; a) <span class=\"comment\">//当t指针指向链表尾时或者下一个结点的值大于待插入值</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p = (struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node)); <span class=\"comment\">//动态申请一个空间，存储结点</span></span><br><span class=\"line\">            p-&gt;data = a;                                    <span class=\"comment\">//将a的值存储在当前结点data域中</span></span><br><span class=\"line\">            p-&gt;next = t-&gt;next;                              <span class=\"comment\">//将插入的结点的next指针指向大于p.data的地址</span></span><br><span class=\"line\">            t-&gt;next = p;                                    <span class=\"comment\">//将当前t的next指针指向p的地址</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t = t-&gt;next; <span class=\"comment\">//让t指针指向下一个结点</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2021/05/05/BgfbrYkGFoKL4OC.png\" alt=\"image-20210421114303258.png\"></p>\n<p>最后就是输出这个链表</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t = head;  <span class=\"comment\">//将头指针赋给t指针</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t != <span class=\"literal\">NULL</span>) <span class=\"comment\">//当t指针指向链表尾时退出</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, t-&gt;data); <span class=\"comment\">//输出data域的值</span></span><br><span class=\"line\">        t = t-&gt;next;            <span class=\"comment\">//让t指针指向下一个结点</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>理清思路后就是编写代码了，完整代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">head</span>, *<span class=\"title\">p</span>, *<span class=\"title\">q</span>, *<span class=\"title\">t</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, n, a;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    head = <span class=\"literal\">NULL</span>;             <span class=\"comment\">//让头指针初始为空</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"comment\">//依次输入n个数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\">        p = (struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node)); <span class=\"comment\">//动态申请一个空间，存储结点</span></span><br><span class=\"line\">        p-&gt;data = a;                                    <span class=\"comment\">//将当前a的值存储到当前结点的data域中</span></span><br><span class=\"line\">        p-&gt;next = <span class=\"literal\">NULL</span>;                                 <span class=\"comment\">//设置当前结点的后继指针指向空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span>)                               <span class=\"comment\">//如果是第一个结点，则将头指针指向这个结点</span></span><br><span class=\"line\">            head = p;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//如果不是第一个结点，则将上一个结点的后继指针指向当前结点</span></span><br><span class=\"line\">            q-&gt;next = p;</span><br><span class=\"line\">        q = p; <span class=\"comment\">//让指针q指向当前结点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);  <span class=\"comment\">//输入要插入的数</span></span><br><span class=\"line\">    t = head;         <span class=\"comment\">//从链表头开始遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t != <span class=\"literal\">NULL</span>) <span class=\"comment\">//到达链表尾时退出循环</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t-&gt;next == <span class=\"literal\">NULL</span> || t-&gt;next-&gt;data &gt; a) <span class=\"comment\">//当t指针指向链表尾时或者下一个结点的值大于待插入值</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p = (struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node)); <span class=\"comment\">//动态申请一个空间，存储结点</span></span><br><span class=\"line\">            p-&gt;data = a;                                    <span class=\"comment\">//将a的值存储在当前结点data域中</span></span><br><span class=\"line\">            p-&gt;next = t-&gt;next;                              <span class=\"comment\">//将插入的结点的next指针指向大于p.data的地址</span></span><br><span class=\"line\">            t-&gt;next = p;                                    <span class=\"comment\">//将当前t的next指针指向p的地址</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t = t-&gt;next; <span class=\"comment\">//让t指针指向下一个结点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t != <span class=\"literal\">NULL</span>) <span class=\"comment\">//当t指针指向链表尾时退出</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, t-&gt;data); <span class=\"comment\">//输出data域的值</span></span><br><span class=\"line\">        t = t-&gt;next;            <span class=\"comment\">//让t指针指向下一个结点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","text":"问题情景：将一个数插入一段有序数列的链表之中 解决这个问题的方法很多，比如可以使用桶排序，冒泡排序……但这次采用指针和动态空间去解决 首先将有序数列（例如：2,3,5,8,9,10,18,26,32）放在一个链表中 链表是由多个结点组成，每个结点由两部分组成：data和* nex...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"C语言","slug":"C语言","count":4,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":4,"path":"api/tags/收获.json"}],"toc":"","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"switch语句高效的原因","uid":"6ab7ba8971edf760af996dc2bda9f711","slug":"switch语句高效的原因","date":"2021-04-25T04:48:37.000Z","updated":"2021-05-06T06:04:24.754Z","comments":true,"path":"api/articles/switch语句高效的原因.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/vQXusgKILDZn5OT.jpg","text":"switch语句和if语句都是条件判断语句，但是switch语句更加高效，因而许多公司在设计时大多采用switch语句 当分支语句较少时，switch与if语句并没有什么区别都是先判断，之后再跳转 当分支较多时，switch语句就发生变化，并没有挨个判断再跳转，只跳转了一次 sw...","link":"","photos":[],"count_time":{"symbolsCount":741,"symbolsTime":"1 mins."},"categories":[{"name":"C语言","slug":"C语言","count":4,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":4,"path":"api/tags/收获.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"解决hexo博客图片无法加载问题","uid":"8c5e835735464cb680ea7b5b166e5319","slug":"解决hexo博客图片无法加载问题","date":"2021-04-20T08:51:23.000Z","updated":"2021-05-06T05:48:25.502Z","comments":true,"path":"api/articles/解决hexo博客图片无法加载问题.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/blPaQH7fxYhopEy.jpg","text":"起初搭建好博客时，发现照片无法上传本地照片， 根据网上的方法整了半天也没整好，最后还是室友告诉我通过下面的方法才可以引用本地照片 1&lt;img src&#x3D;&quot;path&quot; height&#x3D;&quot;xxx&quot; width&#x3D;&...","link":"","photos":[],"count_time":{"symbolsCount":554,"symbolsTime":"1 mins."},"categories":[{"name":"问题","slug":"问题","count":2,"path":"api/categories/问题.json"}],"tags":[{"name":"博客","slug":"博客","count":2,"path":"api/tags/博客.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}