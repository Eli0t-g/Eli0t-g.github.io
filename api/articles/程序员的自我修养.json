{"title":"程序员的自我修养","uid":"af7567a01704ef88a3107a466485b1d6","slug":"程序员的自我修养","date":"2021-05-02T07:24:45.000Z","updated":"2021-05-07T03:57:29.556Z","comments":true,"path":"api/articles/程序员的自我修养.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/QkoWgnj7FDpwYX9.jpg","content":"<h1 id=\"分段\"><a href=\"#分段\" class=\"headerlink\" title=\"分段\"></a>分段</h1><p>基本思路使把一段与程序所需的内存空间大小的虚拟空间映射到某个地址空间。采用分段的方法可以解决以下几个问题</p>\n<ul>\n<li><p>地址空间不隔离。如果不同程序间地址连续很容易被恶意程序通过溢出手段使其它程序崩溃或者产生严重后果，而分段可以避免这种情况，比如此时有A,B两个程序，此时操作系统会分配两个虚拟地址，初始地址都是0x00000000，终止地址为程序的大小，一旦该程序访问超过了这个虚拟地址空间，操作系统就会抛出拒绝访问，如果正常访问，操作系统就会将虚拟地址映射到空闲物理地址中。</p>\n<p><img src=\"https://i.loli.net/2021/05/05/xBaXR7tqjJcbWpl.png\" alt=\"image-20210502230422504.png\"></p>\n</li>\n<li><p>解决运行地址不确定。每次程序装载运行时，操作系统为其分配的空闲地址是不确定的，比如这次是0x00000000 ~ 0x00A00000，下一次可能就是0x00200000 ~ 0x00C00000，但是采用分段的方法，在虚拟内存中程序起始地址和终止地址不会发生改变，很好的解决了解决运行地址不确定这一问题。</p>\n</li>\n<li><p>对不同的段设置不同的权限。比如数据段就不会有执行权限，只读段只有读取的权限，有效的防止了溢出攻击，加大程序被攻破的难度</p>\n</li>\n<li><p>适应CPU的缓存体系。CPU缓存体系被分为数据缓存和指令缓存，采用分段的方法极大地提高了缓存的命中率。</p>\n</li>\n<li><p>有利于共享空间，节约内存。比如系统在运行某一个程序时，可能出现多个该程序的多个副本，这些副本代码是一样的且只可读，所以可以采取共享一个段的方法来节约内存。</p>\n<p>当然，分段并不是完美无缺的，当内存不够时，操作系统会将一些在内存中进程存进磁盘，采用分段的方法，由于映射的单位是程序，所以换入换出的是整个程序，粒度较大，严重影响了运行速度</p>\n</li>\n</ul>\n<h1 id=\"不要让CPU打盹\"><a href=\"#不要让CPU打盹\" class=\"headerlink\" title=\"不要让CPU打盹\"></a>不要让CPU打盹</h1><p>CPU的价值巨大，为了充分利用CPU，早期采用<strong>多道程序</strong>的方法利用CPU，就是当某个程序不再需要CPU时，监控程序就会将需要CPU的程序自动开启，虽然提高CPU利用率，但是不能很好满足用户需求，比如用户要启动一个程序，可能要等待上一个程序上一个程序完成才行，这是极为致命，所以改进为<strong>分时系统</strong>，分时系统能够较好的改良这个问题，如果有个程序在使用CPU，但此时用户要启动另一个程序，系统就会暂停这个程序，去完成用户指定的程序，但这个办法缺点是，如果有个程序霸占CPU，那么即使用户要启动另一个程序依旧要等待，因为所有的优先级是一样的，为了解决这个问题，改进为如今的<strong>多任务系统</strong>，这个系统中操作系统有了最高权限，接管了所有的硬件资源，且受硬件保护，应用程序都是以<strong>进程</strong>的运行，它们的权限会比操作系统低，同时，每个进程都会有<strong>独立的地址空间</strong>，让进程相互分开。不仅如此，每个进程都有有个优先级，能够有序的运行，万一优先级较高的进程霸占了CPU，操作系统就会“出手”暂停这个进程将CPU分给下一个进程，也就是所谓的<strong>抢占式</strong>。</p>\n<h1 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h1><p><strong>进程（Process）</strong>是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。<strong>线程</strong>被称为<strong>轻量级进程</strong>是程序执行流的最小单元，由线程ID，当前指令指针，寄存器集合和堆栈组成。线程可以访问进程内存里面所有数据，甚至包括其他线程等等堆栈(要知道其他线程堆栈的地址，很少见的情况)，当然线程也有私有内存空间，如栈(并非完全私有)，线程局部存储，寄存器。而在Linux下没有线程与进程的概念，但是有类似作用的<strong>任务</strong>，任务相当于线程，但是任务之间可以选择共享内存空间，这些任务组合起来就相当于Windows下的进程。</p>\n<h1 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h1><h2 id=\"二元信号量\"><a href=\"#二元信号量\" class=\"headerlink\" title=\"二元信号量\"></a><strong>二元信号量</strong></h2><p>　　是最简单的一种锁，适合只能被唯一一个线程独占访问的资源；对于允许多个线程并发访问的资源，多元信号量简称信号量；</p>\n<h2 id=\"互斥量\"><a href=\"#互斥量\" class=\"headerlink\" title=\"互斥量\"></a><strong>互斥量</strong></h2><p>　　和二元信号量很类似，资源仅同时允许一个线程访问，但和信号量不同的是，信号量在整个系统可以被任意线程获取并释放；也就是说哪个线程锁的，要哪个线程解锁。</p>\n<h2 id=\"临界区\"><a href=\"#临界区\" class=\"headerlink\" title=\"临界区\"></a><strong>临界区</strong></h2><p>　　是比互斥量更加严格的同步手段。在术语中，把临界区的获取称为进入临界区，而把锁的释放称为离开临界区。与互斥量和信号量的区别：</p>\n<p>　　(1)互斥量和信号量字系统的任何进程都是可见的。</p>\n<p>　　(2)临界区的作用范围仅限于本进程，其他进程无法获取该锁。</p>\n","text":"分段基本思路使把一段与程序所需的内存空间大小的虚拟空间映射到某个地址空间。采用分段的方法可以解决以下几个问题 地址空间不隔离。如果不同程序间地址连续很容易被恶意程序通过溢出手段使其它程序崩溃或者产生严重后果，而分段可以避免这种情况，比如此时有A,B两个程序，此时操作系统会分配两个...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"读书笔记","slug":"读书笔记","count":1,"path":"api/categories/读书笔记.json"}],"tags":[{"name":"程序员的自我修养","slug":"程序员的自我修养","count":1,"path":"api/tags/程序员的自我修养.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%AE%B5\"><span class=\"toc-text\">分段</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E8%A6%81%E8%AE%A9CPU%E6%89%93%E7%9B%B9\"><span class=\"toc-text\">不要让CPU打盹</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">进程与线程</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5\"><span class=\"toc-text\">线程同步</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%85%83%E4%BF%A1%E5%8F%B7%E9%87%8F\"><span class=\"toc-text\">二元信号量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%92%E6%96%A5%E9%87%8F\"><span class=\"toc-text\">互斥量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%B4%E7%95%8C%E5%8C%BA\"><span class=\"toc-text\">临界区</span></a></li></ol></li></ol>","author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"蓝帽杯MISC","uid":"1521d5bfeaaa79eb316ce7916671f885","slug":"蓝帽杯MISC","date":"2021-05-04T02:34:09.000Z","updated":"2021-05-06T05:10:01.819Z","comments":true,"path":"api/articles/蓝帽杯MISC.json","keywords":null,"cover":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","text":"冰墩墩拿到附件拖进虚拟机中使用binwalk查看 发现里面存在rar压缩包，使用foremost进行分离 发现音频和提示 将音频放进010，在结尾发现cipher 将对应的十六进制码复制下来，搜索以0~F编码的加密方式，发现是url编码。 对十六进制码进行处理 解码后发现是一堆表...","link":"","photos":[],"count_time":{"symbolsCount":389,"symbolsTime":"1 mins."},"categories":[{"name":"MISC","slug":"MISC","count":3,"path":"api/categories/MISC.json"}],"tags":[{"name":"write up","slug":"write-up","count":1,"path":"api/tags/write-up.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"C语言函数调用与常见调用约定","uid":"20bf7105b3d9595b11047eca410abfeb","slug":"C语言函数调用与常见调用约定","date":"2021-04-25T14:02:30.000Z","updated":"2021-05-09T03:22:20.395Z","comments":true,"path":"api/articles/C语言函数调用与常见调用约定.json","keywords":null,"cover":"https://i.loli.net/2021/05/06/Z3CboONMf2WxlR6.jpg","text":"函数调用下面代码展示了一个简单的加法子函数调用 12345678910#include&lt;stdio.h&gt;int plus (int a,int b)&#123; return a+b;&#125;void main()&#123; int a=1,b=2,c; c=p...","link":"","photos":[],"count_time":{"symbolsCount":864,"symbolsTime":"1 mins."},"categories":[{"name":"C语言","slug":"C语言","count":4,"path":"api/categories/C语言.json"}],"tags":[{"name":"收获","slug":"收获","count":4,"path":"api/tags/收获.json"}],"author":{"name":"Krito","slug":"blog-author","avatar":"https://i.loli.net/2021/05/05/GFiJQZM1pxK3AyC.jpg","link":"/","description":"不要等待，时机永远不会恰到好处。","socials":{"github":"https://github.com/Eli0t-g","twitter":"https://twitter.com/home","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/wu-sheng-85-17-66","csdn":"https://blog.csdn.net/qq_52053150?spm=1000.2115.3001.5343","juejin":"","customs":{}}}}}